
OLED1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c14  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00402c14  00402c14  00012c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     0000044c  20400000  00402c1c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000002bc  2040044c  00403068  0002044c  2**2
                  ALLOC
  4 .stack        00002000  20400708  00403324  0002044c  2**0
                  ALLOC
  5 .heap         00000200  20402708  00405324  0002044c  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  0002044c  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002047a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0001918c  00000000  00000000  000204d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000038a7  00000000  00000000  0003965f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000065e2  00000000  00000000  0003cf06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000009d8  00000000  00000000  000434e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a40  00000000  00000000  00043ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00021935  00000000  00000000  00044900  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000f922  00000000  00000000  00066235  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008fed1  00000000  00000000  00075b57  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001854  00000000  00000000  00105a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	08 27 40 20 f1 14 40 00 ed 14 40 00 ed 14 40 00     .'@ ..@...@...@.
  400010:	ed 14 40 00 ed 14 40 00 ed 14 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	ed 14 40 00 ed 14 40 00 00 00 00 00 ed 14 40 00     ..@...@.......@.
  40003c:	ed 14 40 00 ed 14 40 00 ed 14 40 00 09 18 40 00     ..@...@...@...@.
  40004c:	51 19 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     Q.@...@...@...@.
  40005c:	ed 14 40 00 ed 14 40 00 00 00 00 00 15 13 40 00     ..@...@.......@.
  40006c:	29 13 40 00 3d 13 40 00 ed 14 40 00 ed 14 40 00     ).@.=.@...@...@.
  40007c:	ed 14 40 00 51 13 40 00 65 13 40 00 ed 14 40 00     ..@.Q.@.e.@...@.
  40008c:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  40009c:	ed 14 40 00 f5 18 40 00 21 19 40 00 ed 14 40 00     ..@...@.!.@...@.
  4000ac:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  4000bc:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  4000cc:	ed 14 40 00 00 00 00 00 ed 14 40 00 00 00 00 00     ..@.......@.....
  4000dc:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  4000ec:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  4000fc:	ed 14 40 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ..@...@...@...@.
  40010c:	ed 14 40 00 ed 14 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 ed 14 40 00 ed 14 40 00 ed 14 40 00     ......@...@...@.
  40012c:	ed 14 40 00 ed 14 40 00 00 00 00 00 ed 14 40 00     ..@...@.......@.
  40013c:	ed 14 40 00                                         ..@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	2040044c 	.word	0x2040044c
  40015c:	00000000 	.word	0x00000000
  400160:	00402c1c 	.word	0x00402c1c

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00402c1c 	.word	0x00402c1c
  4001a0:	20400450 	.word	0x20400450
  4001a4:	00402c1c 	.word	0x00402c1c
  4001a8:	00000000 	.word	0x00000000

004001ac <rtc_set_hour_mode>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_mode 1 for 12-hour mode, 0 for 24-hour mode.
 */
void rtc_set_hour_mode(Rtc *p_rtc, uint32_t ul_mode)
{
	if (ul_mode) {
  4001ac:	b921      	cbnz	r1, 4001b8 <rtc_set_hour_mode+0xc>
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
	} else {
		p_rtc->RTC_MR &= (~RTC_MR_HRMOD);
  4001ae:	6843      	ldr	r3, [r0, #4]
  4001b0:	f023 0301 	bic.w	r3, r3, #1
  4001b4:	6043      	str	r3, [r0, #4]
  4001b6:	4770      	bx	lr
		p_rtc->RTC_MR |= RTC_MR_HRMOD;
  4001b8:	6843      	ldr	r3, [r0, #4]
  4001ba:	f043 0301 	orr.w	r3, r3, #1
  4001be:	6043      	str	r3, [r0, #4]
  4001c0:	4770      	bx	lr

004001c2 <rtc_enable_interrupt>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_sources Interrupts to be enabled.
 */
void rtc_enable_interrupt(Rtc *p_rtc, uint32_t ul_sources)
{
	p_rtc->RTC_IER = ul_sources;
  4001c2:	6201      	str	r1, [r0, #32]
  4001c4:	4770      	bx	lr

004001c6 <rtc_get_time>:
 * \param pul_minute Current minute.
 * \param pul_second Current second.
 */
void rtc_get_time(Rtc *p_rtc, uint32_t *pul_hour, uint32_t *pul_minute,
		uint32_t *pul_second)
{
  4001c6:	b430      	push	{r4, r5}
	uint32_t ul_time;
	uint32_t ul_temp;

	/* Get the current RTC time (multiple reads are necessary to insure a stable value). */
	ul_time = p_rtc->RTC_TIMR;
  4001c8:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001ca:	6884      	ldr	r4, [r0, #8]
  4001cc:	42a5      	cmp	r5, r4
  4001ce:	d003      	beq.n	4001d8 <rtc_get_time+0x12>
		ul_time = p_rtc->RTC_TIMR;
  4001d0:	6885      	ldr	r5, [r0, #8]
	while (ul_time != p_rtc->RTC_TIMR) {
  4001d2:	6884      	ldr	r4, [r0, #8]
  4001d4:	42ac      	cmp	r4, r5
  4001d6:	d1fb      	bne.n	4001d0 <rtc_get_time+0xa>
	}

	/* Hour */
	if (pul_hour) {
  4001d8:	b161      	cbz	r1, 4001f4 <rtc_get_time+0x2e>
		ul_temp = (ul_time & RTC_TIMR_HOUR_Msk) >> RTC_TIMR_HOUR_Pos;
		*pul_hour = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  4001da:	f3c4 5001 	ubfx	r0, r4, #20, #2
  4001de:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  4001e2:	f3c4 4003 	ubfx	r0, r4, #16, #4
  4001e6:	eb00 0045 	add.w	r0, r0, r5, lsl #1

		if ((ul_time & RTC_TIMR_AMPM) == RTC_TIMR_AMPM) {
  4001ea:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
			*pul_hour += 12;
  4001ee:	bf18      	it	ne
  4001f0:	300c      	addne	r0, #12
  4001f2:	6008      	str	r0, [r1, #0]
		}
	}

	/* Minute */
	if (pul_minute) {
  4001f4:	b142      	cbz	r2, 400208 <rtc_get_time+0x42>
		ul_temp = (ul_time & RTC_TIMR_MIN_Msk) >> RTC_TIMR_MIN_Pos;
		*pul_minute = (ul_temp >> BCD_SHIFT) * BCD_FACTOR +  (ul_temp & BCD_MASK);
  4001f6:	f3c4 3102 	ubfx	r1, r4, #12, #3
  4001fa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  4001fe:	f3c4 2003 	ubfx	r0, r4, #8, #4
  400202:	eb00 0141 	add.w	r1, r0, r1, lsl #1
  400206:	6011      	str	r1, [r2, #0]
	}

	/* Second */
	if (pul_second) {
  400208:	b143      	cbz	r3, 40021c <rtc_get_time+0x56>
		ul_temp = (ul_time & RTC_TIMR_SEC_Msk) >> RTC_TIMR_SEC_Pos;
		*pul_second = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40020a:	f3c4 1202 	ubfx	r2, r4, #4, #3
  40020e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400212:	f004 040f 	and.w	r4, r4, #15
  400216:	eb04 0442 	add.w	r4, r4, r2, lsl #1
  40021a:	601c      	str	r4, [r3, #0]
	}
}
  40021c:	bc30      	pop	{r4, r5}
  40021e:	4770      	bx	lr

00400220 <rtc_set_time>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_time(Rtc *p_rtc, uint32_t ul_hour, uint32_t ul_minute,
		uint32_t ul_second)
{
  400220:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t ul_time = 0;

	/* If 12-hour mode, set AMPM bit */
	if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  400222:	6844      	ldr	r4, [r0, #4]
		if (ul_hour > 12) {
  400224:	f014 0f01 	tst.w	r4, #1
  400228:	d005      	beq.n	400236 <rtc_set_time+0x16>
  40022a:	290c      	cmp	r1, #12
  40022c:	d903      	bls.n	400236 <rtc_set_time+0x16>
			ul_hour -= 12;
  40022e:	390c      	subs	r1, #12
			ul_time |= RTC_TIMR_AMPM;
  400230:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
  400234:	e000      	b.n	400238 <rtc_set_time+0x18>
	uint32_t ul_time = 0;
  400236:	2700      	movs	r7, #0
	/* Minute */
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);

	/* Second */
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400238:	4c1c      	ldr	r4, [pc, #112]	; (4002ac <rtc_set_time+0x8c>)
  40023a:	fba4 5603 	umull	r5, r6, r4, r3
  40023e:	08f6      	lsrs	r6, r6, #3
			((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  400240:	eb06 0586 	add.w	r5, r6, r6, lsl #2
  400244:	eba3 0345 	sub.w	r3, r3, r5, lsl #1
  400248:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
	ul_time |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  40024c:	fba4 6502 	umull	r6, r5, r4, r2
  400250:	08ed      	lsrs	r5, r5, #3
  400252:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
			((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  400256:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40025a:	eba2 0545 	sub.w	r5, r2, r5, lsl #1
  40025e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  400262:	433b      	orrs	r3, r7
	ul_time |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  400264:	fba4 4201 	umull	r4, r2, r4, r1
  400268:	08d2      	lsrs	r2, r2, #3
  40026a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
			((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  40026e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  400272:	eba1 0142 	sub.w	r1, r1, r2, lsl #1
	ul_time |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400276:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

	/* Update time register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  40027a:	6983      	ldr	r3, [r0, #24]
  40027c:	f013 0f04 	tst.w	r3, #4
  400280:	d0fb      	beq.n	40027a <rtc_set_time+0x5a>
	p_rtc->RTC_CR |= RTC_CR_UPDTIM;
  400282:	6803      	ldr	r3, [r0, #0]
  400284:	f043 0301 	orr.w	r3, r3, #1
  400288:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  40028a:	6983      	ldr	r3, [r0, #24]
  40028c:	f013 0f01 	tst.w	r3, #1
  400290:	d0fb      	beq.n	40028a <rtc_set_time+0x6a>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  400292:	2301      	movs	r3, #1
  400294:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_TIMR = ul_time;
  400296:	6081      	str	r1, [r0, #8]
	p_rtc->RTC_CR &= (~RTC_CR_UPDTIM);
  400298:	6803      	ldr	r3, [r0, #0]
  40029a:	f023 0301 	bic.w	r3, r3, #1
  40029e:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVTIM);
  4002a0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4002a2:	f000 0001 	and.w	r0, r0, #1
  4002a6:	bcf0      	pop	{r4, r5, r6, r7}
  4002a8:	4770      	bx	lr
  4002aa:	bf00      	nop
  4002ac:	cccccccd 	.word	0xcccccccd

004002b0 <rtc_set_time_alarm>:
 */
uint32_t rtc_set_time_alarm(Rtc *p_rtc,
		uint32_t ul_hour_flag, uint32_t ul_hour,
		uint32_t ul_minute_flag, uint32_t ul_minute,
		uint32_t ul_second_flag, uint32_t ul_second)
{
  4002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  4002b2:	9c05      	ldr	r4, [sp, #20]
  4002b4:	9d06      	ldr	r5, [sp, #24]
  4002b6:	9f07      	ldr	r7, [sp, #28]
	uint32_t ul_alarm = 0;

	/* Hour alarm setting */
	if (ul_hour_flag) {
  4002b8:	460e      	mov	r6, r1
  4002ba:	b1b1      	cbz	r1, 4002ea <rtc_set_time_alarm+0x3a>
		/* If 12-hour mode, set AMPM bit */
		if ((p_rtc->RTC_MR & RTC_MR_HRMOD) == RTC_MR_HRMOD) {
  4002bc:	6841      	ldr	r1, [r0, #4]
			if (ul_hour > 12) {
  4002be:	f011 0f01 	tst.w	r1, #1
  4002c2:	d005      	beq.n	4002d0 <rtc_set_time_alarm+0x20>
  4002c4:	2a0c      	cmp	r2, #12
  4002c6:	d903      	bls.n	4002d0 <rtc_set_time_alarm+0x20>
				ul_hour -= 12;
  4002c8:	3a0c      	subs	r2, #12
				ul_alarm |= RTC_TIMR_AMPM;
  4002ca:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
  4002ce:	e000      	b.n	4002d2 <rtc_set_time_alarm+0x22>
	uint32_t ul_alarm = 0;
  4002d0:	2600      	movs	r6, #0
			}
		}

		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002d2:	4919      	ldr	r1, [pc, #100]	; (400338 <rtc_set_time_alarm+0x88>)
  4002d4:	fba1 e102 	umull	lr, r1, r1, r2
  4002d8:	08c9      	lsrs	r1, r1, #3
				((ul_hour % BCD_FACTOR) << RTC_TIMR_HOUR_Pos);
  4002da:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
  4002de:	eba2 024e 	sub.w	r2, r2, lr, lsl #1
  4002e2:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_hour / BCD_FACTOR) << (RTC_TIMR_HOUR_Pos + BCD_SHIFT)) |
  4002e4:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
  4002e8:	4316      	orrs	r6, r2
	}

	/* Minute alarm setting */
	if (ul_minute_flag) {
  4002ea:	b15b      	cbz	r3, 400304 <rtc_set_time_alarm+0x54>
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002ec:	4b12      	ldr	r3, [pc, #72]	; (400338 <rtc_set_time_alarm+0x88>)
  4002ee:	fba3 2304 	umull	r2, r3, r3, r4
  4002f2:	08db      	lsrs	r3, r3, #3
				((ul_minute % BCD_FACTOR) << RTC_TIMR_MIN_Pos);
  4002f4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  4002f8:	eba4 0442 	sub.w	r4, r4, r2, lsl #1
  4002fc:	0224      	lsls	r4, r4, #8
		ul_alarm |= ((ul_minute / BCD_FACTOR) << (RTC_TIMR_MIN_Pos + BCD_SHIFT)) |
  4002fe:	ea44 3403 	orr.w	r4, r4, r3, lsl #12
  400302:	4326      	orrs	r6, r4
	}

	/* Second alarm setting */
	if (ul_second_flag) {
  400304:	b155      	cbz	r5, 40031c <rtc_set_time_alarm+0x6c>
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400306:	4b0c      	ldr	r3, [pc, #48]	; (400338 <rtc_set_time_alarm+0x88>)
  400308:	fba3 2307 	umull	r2, r3, r3, r7
  40030c:	08db      	lsrs	r3, r3, #3
				((ul_second % BCD_FACTOR) << RTC_TIMR_SEC_Pos);
  40030e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
  400312:	eba7 0742 	sub.w	r7, r7, r2, lsl #1
		ul_alarm |= ((ul_second / BCD_FACTOR) << (RTC_TIMR_SEC_Pos + BCD_SHIFT)) |
  400316:	ea47 1303 	orr.w	r3, r7, r3, lsl #4
  40031a:	431e      	orrs	r6, r3
	}

	p_rtc->RTC_TIMALR &= ~(RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  40031c:	6902      	ldr	r2, [r0, #16]
  40031e:	4b07      	ldr	r3, [pc, #28]	; (40033c <rtc_set_time_alarm+0x8c>)
  400320:	4013      	ands	r3, r2
  400322:	6103      	str	r3, [r0, #16]
	p_rtc->RTC_TIMALR = ul_alarm;
  400324:	6106      	str	r6, [r0, #16]
	p_rtc->RTC_TIMALR |= (RTC_TIMALR_SECEN | RTC_TIMALR_MINEN | RTC_TIMALR_HOUREN);
  400326:	6902      	ldr	r2, [r0, #16]
  400328:	4b05      	ldr	r3, [pc, #20]	; (400340 <rtc_set_time_alarm+0x90>)
  40032a:	4313      	orrs	r3, r2
  40032c:	6103      	str	r3, [r0, #16]

	return (p_rtc->RTC_VER & RTC_VER_NVTIMALR);
  40032e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  400330:	f000 0004 	and.w	r0, r0, #4
  400334:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400336:	bf00      	nop
  400338:	cccccccd 	.word	0xcccccccd
  40033c:	ff7f7f7f 	.word	0xff7f7f7f
  400340:	00808080 	.word	0x00808080

00400344 <rtc_get_date>:
 * \param pul_day Current day.
 * \param pul_week Current day in current week.
 */
void rtc_get_date(Rtc *p_rtc, uint32_t *pul_year, uint32_t *pul_month,
		uint32_t *pul_day, uint32_t *pul_week)
{
  400344:	b4f0      	push	{r4, r5, r6, r7}
  400346:	9e04      	ldr	r6, [sp, #16]
	uint32_t ul_date;
	uint32_t ul_cent;
	uint32_t ul_temp;

	/* Get the current date (multiple reads are necessary to insure a stable value). */
	ul_date = p_rtc->RTC_CALR;
  400348:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  40034a:	68c4      	ldr	r4, [r0, #12]
  40034c:	42a5      	cmp	r5, r4
  40034e:	d003      	beq.n	400358 <rtc_get_date+0x14>
		ul_date = p_rtc->RTC_CALR;
  400350:	68c5      	ldr	r5, [r0, #12]
	while (ul_date != p_rtc->RTC_CALR) {
  400352:	68c4      	ldr	r4, [r0, #12]
  400354:	42ac      	cmp	r4, r5
  400356:	d1fb      	bne.n	400350 <rtc_get_date+0xc>
	}

	/* Retrieve year */
	if (pul_year) {
  400358:	b199      	cbz	r1, 400382 <rtc_get_date+0x3e>
		ul_temp = (ul_date & RTC_CALR_CENT_Msk) >> RTC_CALR_CENT_Pos;
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
		ul_temp = (ul_date & RTC_CALR_YEAR_Msk) >> RTC_CALR_YEAR_Pos;
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40035a:	f3c4 3003 	ubfx	r0, r4, #12, #4
  40035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  400362:	f3c4 2703 	ubfx	r7, r4, #8, #4
  400366:	eb07 0740 	add.w	r7, r7, r0, lsl #1
		ul_cent = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40036a:	f3c4 1002 	ubfx	r0, r4, #4, #3
  40036e:	eb00 0580 	add.w	r5, r0, r0, lsl #2
  400372:	f004 000f 	and.w	r0, r4, #15
  400376:	eb00 0045 	add.w	r0, r0, r5, lsl #1
				(ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  40037a:	2564      	movs	r5, #100	; 0x64
  40037c:	fb05 7000 	mla	r0, r5, r0, r7
		*pul_year = (ul_cent * BCD_FACTOR * BCD_FACTOR) +
  400380:	6008      	str	r0, [r1, #0]
	}

	/* Retrieve month */
	if (pul_month) {
  400382:	b142      	cbz	r2, 400396 <rtc_get_date+0x52>
		ul_temp = (ul_date & RTC_CALR_MONTH_Msk) >> RTC_CALR_MONTH_Pos;
		*pul_month = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400384:	f3c4 5000 	ubfx	r0, r4, #20, #1
  400388:	0081      	lsls	r1, r0, #2
  40038a:	4408      	add	r0, r1
  40038c:	f3c4 4103 	ubfx	r1, r4, #16, #4
  400390:	eb01 0140 	add.w	r1, r1, r0, lsl #1
  400394:	6011      	str	r1, [r2, #0]
	}

	/* Retrieve day */
	if (pul_day) {
  400396:	b143      	cbz	r3, 4003aa <rtc_get_date+0x66>
		ul_temp = (ul_date & RTC_CALR_DATE_Msk) >> RTC_CALR_DATE_Pos;
		*pul_day = (ul_temp >> BCD_SHIFT) * BCD_FACTOR + (ul_temp & BCD_MASK);
  400398:	f3c4 7201 	ubfx	r2, r4, #28, #2
  40039c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  4003a0:	f3c4 6103 	ubfx	r1, r4, #24, #4
  4003a4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
  4003a8:	601a      	str	r2, [r3, #0]
	}

	/* Retrieve week */
	if (pul_week) {
  4003aa:	b116      	cbz	r6, 4003b2 <rtc_get_date+0x6e>
		*pul_week = ((ul_date & RTC_CALR_DAY_Msk) >> RTC_CALR_DAY_Pos);
  4003ac:	f3c4 5442 	ubfx	r4, r4, #21, #3
  4003b0:	6034      	str	r4, [r6, #0]
	}
}
  4003b2:	bcf0      	pop	{r4, r5, r6, r7}
  4003b4:	4770      	bx	lr
	...

004003b8 <rtc_set_date>:
 *
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date(Rtc *p_rtc, uint32_t ul_year, uint32_t ul_month,
		uint32_t ul_day, uint32_t ul_week)
{
  4003b8:	b470      	push	{r4, r5, r6}

	/* Week */
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);

	/* Day */
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003ba:	4d2a      	ldr	r5, [pc, #168]	; (400464 <rtc_set_date+0xac>)
  4003bc:	fba5 4603 	umull	r4, r6, r5, r3
  4003c0:	08f6      	lsrs	r6, r6, #3
	ul_date |= (ul_week << RTC_CALR_DAY_Pos);
  4003c2:	9c03      	ldr	r4, [sp, #12]
  4003c4:	0564      	lsls	r4, r4, #21
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003c6:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
			((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  4003ca:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  4003ce:	eba3 0346 	sub.w	r3, r3, r6, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003d2:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
	ul_date |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  4003d6:	fba5 6402 	umull	r6, r4, r5, r2
  4003da:	08e4      	lsrs	r4, r4, #3
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003dc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
			((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  4003e0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  4003e4:	eba2 0244 	sub.w	r2, r2, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003e8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
	ul_date |= ((ul_year / BCD_FACTOR / BCD_FACTOR / BCD_FACTOR) <<
  4003ec:	4b1e      	ldr	r3, [pc, #120]	; (400468 <rtc_set_date+0xb0>)
  4003ee:	fba3 4301 	umull	r4, r3, r3, r1
  4003f2:	099b      	lsrs	r3, r3, #6
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4003f4:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
			((ul_year / BCD_FACTOR / BCD_FACTOR) % BCD_FACTOR) <<  RTC_CALR_CENT_Pos);
  4003f8:	4b1c      	ldr	r3, [pc, #112]	; (40046c <rtc_set_date+0xb4>)
  4003fa:	fba3 4301 	umull	r4, r3, r3, r1
  4003fe:	095b      	lsrs	r3, r3, #5
  400400:	fba5 6403 	umull	r6, r4, r5, r3
  400404:	08e4      	lsrs	r4, r4, #3
  400406:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  40040a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40040e:	431a      	orrs	r2, r3
			((ul_year % BCD_FACTOR) << RTC_CALR_YEAR_Pos);
  400410:	fba5 4301 	umull	r4, r3, r5, r1
  400414:	08db      	lsrs	r3, r3, #3
  400416:	eb03 0483 	add.w	r4, r3, r3, lsl #2
  40041a:	eba1 0144 	sub.w	r1, r1, r4, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  40041e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	ul_date |= (((ul_year / BCD_FACTOR) % BCD_FACTOR) <<
  400422:	fba5 1503 	umull	r1, r5, r5, r3
  400426:	08ed      	lsrs	r5, r5, #3
  400428:	eb05 0585 	add.w	r5, r5, r5, lsl #2
  40042c:	eba3 0545 	sub.w	r5, r3, r5, lsl #1
	ul_date |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400430:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

	/* Update calendar register. Check the spec for the flow. */
	while ((p_rtc->RTC_SR & RTC_SR_SEC) != RTC_SR_SEC);
  400434:	6983      	ldr	r3, [r0, #24]
  400436:	f013 0f04 	tst.w	r3, #4
  40043a:	d0fb      	beq.n	400434 <rtc_set_date+0x7c>
	p_rtc->RTC_CR |= RTC_CR_UPDCAL;
  40043c:	6803      	ldr	r3, [r0, #0]
  40043e:	f043 0302 	orr.w	r3, r3, #2
  400442:	6003      	str	r3, [r0, #0]
	while ((p_rtc->RTC_SR & RTC_SR_ACKUPD) != RTC_SR_ACKUPD);
  400444:	6983      	ldr	r3, [r0, #24]
  400446:	f013 0f01 	tst.w	r3, #1
  40044a:	d0fb      	beq.n	400444 <rtc_set_date+0x8c>
	p_rtc->RTC_SCCR = RTC_SCCR_ACKCLR;
  40044c:	2301      	movs	r3, #1
  40044e:	61c3      	str	r3, [r0, #28]
	p_rtc->RTC_CALR = ul_date;
  400450:	60c2      	str	r2, [r0, #12]
	p_rtc->RTC_CR &= (~RTC_CR_UPDCAL);
  400452:	6803      	ldr	r3, [r0, #0]
  400454:	f023 0302 	bic.w	r3, r3, #2
  400458:	6003      	str	r3, [r0, #0]

	return (p_rtc->RTC_VER & RTC_VER_NVCAL);
  40045a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  40045c:	f000 0002 	and.w	r0, r0, #2
  400460:	bc70      	pop	{r4, r5, r6}
  400462:	4770      	bx	lr
  400464:	cccccccd 	.word	0xcccccccd
  400468:	10624dd3 	.word	0x10624dd3
  40046c:	51eb851f 	.word	0x51eb851f

00400470 <rtc_set_date_alarm>:
 * \return 0 for OK, else invalid setting.
 */
uint32_t rtc_set_date_alarm(Rtc *p_rtc,
		uint32_t ul_month_flag, uint32_t ul_month,
		uint32_t ul_day_flag, uint32_t ul_day)
{
  400470:	b430      	push	{r4, r5}
  400472:	9d02      	ldr	r5, [sp, #8]
	uint32_t ul_alarm = 0;

	/* Month alarm setting */
	if (ul_month_flag) {
  400474:	460c      	mov	r4, r1
  400476:	b151      	cbz	r1, 40048e <rtc_set_date_alarm+0x1e>
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  400478:	4c12      	ldr	r4, [pc, #72]	; (4004c4 <rtc_set_date_alarm+0x54>)
  40047a:	fba4 1402 	umull	r1, r4, r4, r2
  40047e:	08e4      	lsrs	r4, r4, #3
				((ul_month % BCD_FACTOR) << RTC_CALR_MONTH_Pos);
  400480:	eb04 0184 	add.w	r1, r4, r4, lsl #2
  400484:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
  400488:	0412      	lsls	r2, r2, #16
		ul_alarm |= ((ul_month / BCD_FACTOR) << (RTC_CALR_MONTH_Pos + BCD_SHIFT)) |
  40048a:	ea42 5404 	orr.w	r4, r2, r4, lsl #20
	}

	/* Day alarm setting */
	if (ul_day_flag) {
  40048e:	b15b      	cbz	r3, 4004a8 <rtc_set_date_alarm+0x38>
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  400490:	4a0c      	ldr	r2, [pc, #48]	; (4004c4 <rtc_set_date_alarm+0x54>)
  400492:	fba2 3205 	umull	r3, r2, r2, r5
  400496:	08d2      	lsrs	r2, r2, #3
				((ul_day % BCD_FACTOR) << RTC_CALR_DATE_Pos);
  400498:	eb02 0382 	add.w	r3, r2, r2, lsl #2
  40049c:	eba5 0343 	sub.w	r3, r5, r3, lsl #1
  4004a0:	061b      	lsls	r3, r3, #24
		ul_alarm |= ((ul_day / BCD_FACTOR) << (RTC_CALR_DATE_Pos + BCD_SHIFT)) |
  4004a2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
  4004a6:	431c      	orrs	r4, r3
	}

	/* Set alarm */
	p_rtc->RTC_CALALR &= ~(RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004a8:	6942      	ldr	r2, [r0, #20]
  4004aa:	4b07      	ldr	r3, [pc, #28]	; (4004c8 <rtc_set_date_alarm+0x58>)
  4004ac:	4013      	ands	r3, r2
  4004ae:	6143      	str	r3, [r0, #20]
	p_rtc->RTC_CALALR = ul_alarm;
  4004b0:	6144      	str	r4, [r0, #20]
	p_rtc->RTC_CALALR |= (RTC_CALALR_MTHEN | RTC_CALALR_DATEEN);
  4004b2:	6942      	ldr	r2, [r0, #20]
  4004b4:	4b05      	ldr	r3, [pc, #20]	; (4004cc <rtc_set_date_alarm+0x5c>)
  4004b6:	4313      	orrs	r3, r2
  4004b8:	6143      	str	r3, [r0, #20]

	return (p_rtc->RTC_VER & RTC_VER_NVCALALR);
  4004ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
}
  4004bc:	f000 0008 	and.w	r0, r0, #8
  4004c0:	bc30      	pop	{r4, r5}
  4004c2:	4770      	bx	lr
  4004c4:	cccccccd 	.word	0xcccccccd
  4004c8:	7f7fffff 	.word	0x7f7fffff
  4004cc:	80800000 	.word	0x80800000

004004d0 <rtc_get_status>:
 *
 * \return Status of the RTC.
 */
uint32_t rtc_get_status(Rtc *p_rtc)
{
	return (p_rtc->RTC_SR);
  4004d0:	6980      	ldr	r0, [r0, #24]
}
  4004d2:	4770      	bx	lr

004004d4 <rtc_clear_status>:
 * \param p_rtc Pointer to an RTC instance.
 * \param ul_clear Some flag bits which will be cleared.
 */
void rtc_clear_status(Rtc *p_rtc, uint32_t ul_clear)
{
	p_rtc->RTC_SCCR = ul_clear;
  4004d4:	61c1      	str	r1, [r0, #28]
  4004d6:	4770      	bx	lr

004004d8 <rtt_init>:
 * \return 0 if successful.
 */
uint32_t rtt_init(Rtt *p_rtt, uint16_t us_prescaler)
{
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST | g_wobits_in_rtt_mr);
  4004d8:	4b03      	ldr	r3, [pc, #12]	; (4004e8 <rtt_init+0x10>)
  4004da:	681b      	ldr	r3, [r3, #0]
  4004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
  4004e0:	4319      	orrs	r1, r3
  4004e2:	6001      	str	r1, [r0, #0]
#else
	p_rtt->RTT_MR = (us_prescaler | RTT_MR_RTTRST);
#endif
	return 0;
}
  4004e4:	2000      	movs	r0, #0
  4004e6:	4770      	bx	lr
  4004e8:	20400468 	.word	0x20400468

004004ec <rtt_sel_source>:
 * \param p_rtt Pointer to an RTT instance.
 * \param is_rtc_sel RTC 1Hz Clock Selection.
 */
void rtt_sel_source(Rtt *p_rtt, bool is_rtc_sel)
{
	if(is_rtc_sel) {
  4004ec:	b941      	cbnz	r1, 400500 <rtt_sel_source+0x14>
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
	} else {
		g_wobits_in_rtt_mr &= ~RTT_MR_RTC1HZ;
  4004ee:	4a09      	ldr	r2, [pc, #36]	; (400514 <rtt_sel_source+0x28>)
  4004f0:	6813      	ldr	r3, [r2, #0]
  4004f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
  4004f6:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  4004f8:	6802      	ldr	r2, [r0, #0]
  4004fa:	4313      	orrs	r3, r2
  4004fc:	6003      	str	r3, [r0, #0]
  4004fe:	4770      	bx	lr
		g_wobits_in_rtt_mr |= RTT_MR_RTC1HZ;
  400500:	4a04      	ldr	r2, [pc, #16]	; (400514 <rtt_sel_source+0x28>)
  400502:	6813      	ldr	r3, [r2, #0]
  400504:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  400508:	6013      	str	r3, [r2, #0]
		p_rtt->RTT_MR |= g_wobits_in_rtt_mr;
  40050a:	6802      	ldr	r2, [r0, #0]
  40050c:	4313      	orrs	r3, r2
  40050e:	6003      	str	r3, [r0, #0]
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	20400468 	.word	0x20400468

00400518 <rtt_enable_interrupt>:
 */
void rtt_enable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp;

	temp = p_rtt->RTT_MR;
  400518:	6802      	ldr	r2, [r0, #0]
	temp |= ul_sources;
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  40051a:	4b03      	ldr	r3, [pc, #12]	; (400528 <rtt_enable_interrupt+0x10>)
  40051c:	681b      	ldr	r3, [r3, #0]
  40051e:	4319      	orrs	r1, r3
  400520:	4311      	orrs	r1, r2
#endif
	p_rtt->RTT_MR = temp;
  400522:	6001      	str	r1, [r0, #0]
  400524:	4770      	bx	lr
  400526:	bf00      	nop
  400528:	20400468 	.word	0x20400468

0040052c <rtt_disable_interrupt>:
 */
void rtt_disable_interrupt(Rtt *p_rtt, uint32_t ul_sources)
{
	uint32_t temp = 0;

	temp = p_rtt->RTT_MR;
  40052c:	6803      	ldr	r3, [r0, #0]
	temp &= (~ul_sources);
  40052e:	ea23 0101 	bic.w	r1, r3, r1
#if (SAM4N || SAM4S || SAM4E || SAM4C || SAMG51 || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	temp |= g_wobits_in_rtt_mr;
  400532:	4b02      	ldr	r3, [pc, #8]	; (40053c <rtt_disable_interrupt+0x10>)
  400534:	681b      	ldr	r3, [r3, #0]
  400536:	4319      	orrs	r1, r3
#endif
	p_rtt->RTT_MR = temp;
  400538:	6001      	str	r1, [r0, #0]
  40053a:	4770      	bx	lr
  40053c:	20400468 	.word	0x20400468

00400540 <rtt_read_timer_value>:
 *
 * \return The current Real-time Timer value.
 */
uint32_t rtt_read_timer_value(Rtt *p_rtt)
{
	uint32_t rtt_val = p_rtt->RTT_VR;
  400540:	6882      	ldr	r2, [r0, #8]

	while (rtt_val != p_rtt->RTT_VR) {
  400542:	6883      	ldr	r3, [r0, #8]
  400544:	429a      	cmp	r2, r3
  400546:	d003      	beq.n	400550 <rtt_read_timer_value+0x10>
		rtt_val = p_rtt->RTT_VR;
  400548:	6882      	ldr	r2, [r0, #8]
	while (rtt_val != p_rtt->RTT_VR) {
  40054a:	6883      	ldr	r3, [r0, #8]
  40054c:	4293      	cmp	r3, r2
  40054e:	d1fb      	bne.n	400548 <rtt_read_timer_value+0x8>
	}

	return rtt_val;
}
  400550:	4618      	mov	r0, r3
  400552:	4770      	bx	lr

00400554 <rtt_get_status>:
 *
 * \return The Real-time Timer status.
 */
uint32_t rtt_get_status(Rtt *p_rtt)
{
	return p_rtt->RTT_SR;
  400554:	68c0      	ldr	r0, [r0, #12]
}
  400556:	4770      	bx	lr

00400558 <rtt_write_alarm_time>:
 * \param ul_alarm_time Alarm time,Alarm time = ALMV + 1.
 *
 * \retval 0 Configuration is done.
 */
uint32_t rtt_write_alarm_time(Rtt *p_rtt, uint32_t ul_alarm_time)
{
  400558:	b570      	push	{r4, r5, r6, lr}
  40055a:	4606      	mov	r6, r0
  40055c:	460d      	mov	r5, r1
	uint32_t flag;

	flag = p_rtt->RTT_MR & RTT_MR_ALMIEN;
  40055e:	6804      	ldr	r4, [r0, #0]
  400560:	f404 3480 	and.w	r4, r4, #65536	; 0x10000

	rtt_disable_interrupt(RTT, RTT_MR_ALMIEN);
  400564:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400568:	4809      	ldr	r0, [pc, #36]	; (400590 <rtt_write_alarm_time+0x38>)
  40056a:	4b0a      	ldr	r3, [pc, #40]	; (400594 <rtt_write_alarm_time+0x3c>)
  40056c:	4798      	blx	r3

	/**
	 * Alarm time = ALMV + 1,If the incoming parameter 
	 * is 0, the ALMV is set to 0xFFFFFFFF.
	*/
	if(ul_alarm_time == 0) {
  40056e:	b92d      	cbnz	r5, 40057c <rtt_write_alarm_time+0x24>
		p_rtt->RTT_AR = 0xFFFFFFFF;
  400570:	f04f 33ff 	mov.w	r3, #4294967295
  400574:	6073      	str	r3, [r6, #4]
	}
	else {
		p_rtt->RTT_AR = ul_alarm_time - 1;
	}

	if (flag) {
  400576:	b924      	cbnz	r4, 400582 <rtt_write_alarm_time+0x2a>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
	}

	return 0;
}
  400578:	2000      	movs	r0, #0
  40057a:	bd70      	pop	{r4, r5, r6, pc}
		p_rtt->RTT_AR = ul_alarm_time - 1;
  40057c:	3d01      	subs	r5, #1
  40057e:	6075      	str	r5, [r6, #4]
  400580:	e7f9      	b.n	400576 <rtt_write_alarm_time+0x1e>
		rtt_enable_interrupt(RTT, RTT_MR_ALMIEN);
  400582:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400586:	4802      	ldr	r0, [pc, #8]	; (400590 <rtt_write_alarm_time+0x38>)
  400588:	4b03      	ldr	r3, [pc, #12]	; (400598 <rtt_write_alarm_time+0x40>)
  40058a:	4798      	blx	r3
  40058c:	e7f4      	b.n	400578 <rtt_write_alarm_time+0x20>
  40058e:	bf00      	nop
  400590:	400e1830 	.word	0x400e1830
  400594:	0040052d 	.word	0x0040052d
  400598:	00400519 	.word	0x00400519

0040059c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  40059c:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40059e:	4b07      	ldr	r3, [pc, #28]	; (4005bc <spi_enable_clock+0x20>)
  4005a0:	4298      	cmp	r0, r3
  4005a2:	d003      	beq.n	4005ac <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  4005a4:	4b06      	ldr	r3, [pc, #24]	; (4005c0 <spi_enable_clock+0x24>)
  4005a6:	4298      	cmp	r0, r3
  4005a8:	d004      	beq.n	4005b4 <spi_enable_clock+0x18>
  4005aa:	bd08      	pop	{r3, pc}
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4005ac:	2015      	movs	r0, #21
  4005ae:	4b05      	ldr	r3, [pc, #20]	; (4005c4 <spi_enable_clock+0x28>)
  4005b0:	4798      	blx	r3
  4005b2:	bd08      	pop	{r3, pc}
  4005b4:	202a      	movs	r0, #42	; 0x2a
  4005b6:	4b03      	ldr	r3, [pc, #12]	; (4005c4 <spi_enable_clock+0x28>)
  4005b8:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  4005ba:	e7f6      	b.n	4005aa <spi_enable_clock+0xe>
  4005bc:	40008000 	.word	0x40008000
  4005c0:	40058000 	.word	0x40058000
  4005c4:	00401499 	.word	0x00401499

004005c8 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  4005c8:	6843      	ldr	r3, [r0, #4]
  4005ca:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  4005ce:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  4005d0:	6843      	ldr	r3, [r0, #4]
  4005d2:	0409      	lsls	r1, r1, #16
  4005d4:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  4005d8:	4319      	orrs	r1, r3
  4005da:	6041      	str	r1, [r0, #4]
  4005dc:	4770      	bx	lr

004005de <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  4005de:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  4005e0:	f643 2499 	movw	r4, #15001	; 0x3a99
  4005e4:	6905      	ldr	r5, [r0, #16]
  4005e6:	f015 0f02 	tst.w	r5, #2
  4005ea:	d103      	bne.n	4005f4 <spi_write+0x16>
		if (!timeout--) {
  4005ec:	3c01      	subs	r4, #1
  4005ee:	d1f9      	bne.n	4005e4 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  4005f0:	2001      	movs	r0, #1
  4005f2:	e00c      	b.n	40060e <spi_write+0x30>
 *
 * \return 1 for Variable mode, 0 for fixed mode.
 */
static inline uint32_t spi_get_peripheral_select_mode(Spi *p_spi)
{
	if (p_spi->SPI_MR & SPI_MR_PS) {
  4005f4:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  4005f6:	f014 0f02 	tst.w	r4, #2
  4005fa:	d006      	beq.n	40060a <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  4005fc:	0412      	lsls	r2, r2, #16
  4005fe:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  400602:	4311      	orrs	r1, r2
		if (uc_last) {
  400604:	b10b      	cbz	r3, 40060a <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  400606:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  40060a:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  40060c:	2000      	movs	r0, #0
}
  40060e:	bc30      	pop	{r4, r5}
  400610:	4770      	bx	lr

00400612 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  400612:	b932      	cbnz	r2, 400622 <spi_set_clock_polarity+0x10>
  400614:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  400618:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40061a:	f023 0301 	bic.w	r3, r3, #1
  40061e:	6303      	str	r3, [r0, #48]	; 0x30
  400620:	4770      	bx	lr
  400622:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  400626:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400628:	f043 0301 	orr.w	r3, r3, #1
  40062c:	6303      	str	r3, [r0, #48]	; 0x30
  40062e:	4770      	bx	lr

00400630 <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  400630:	b932      	cbnz	r2, 400640 <spi_set_clock_phase+0x10>
  400632:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  400636:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400638:	f023 0302 	bic.w	r3, r3, #2
  40063c:	6303      	str	r3, [r0, #48]	; 0x30
  40063e:	4770      	bx	lr
  400640:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  400644:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400646:	f043 0302 	orr.w	r3, r3, #2
  40064a:	6303      	str	r3, [r0, #48]	; 0x30
  40064c:	4770      	bx	lr

0040064e <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  40064e:	2a04      	cmp	r2, #4
  400650:	d003      	beq.n	40065a <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  400652:	b16a      	cbz	r2, 400670 <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  400654:	2a08      	cmp	r2, #8
  400656:	d016      	beq.n	400686 <spi_configure_cs_behavior+0x38>
  400658:	4770      	bx	lr
  40065a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  40065e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400660:	f023 0308 	bic.w	r3, r3, #8
  400664:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  400666:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400668:	f043 0304 	orr.w	r3, r3, #4
  40066c:	6303      	str	r3, [r0, #48]	; 0x30
  40066e:	4770      	bx	lr
  400670:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  400674:	6b03      	ldr	r3, [r0, #48]	; 0x30
  400676:	f023 0308 	bic.w	r3, r3, #8
  40067a:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40067c:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40067e:	f023 0304 	bic.w	r3, r3, #4
  400682:	6303      	str	r3, [r0, #48]	; 0x30
  400684:	4770      	bx	lr
  400686:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  40068a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40068c:	f043 0308 	orr.w	r3, r3, #8
  400690:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  400692:	e7e1      	b.n	400658 <spi_configure_cs_behavior+0xa>

00400694 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  400694:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  400698:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  40069a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40069e:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  4006a0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006a2:	431a      	orrs	r2, r3
  4006a4:	630a      	str	r2, [r1, #48]	; 0x30
  4006a6:	4770      	bx	lr

004006a8 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  4006a8:	1e43      	subs	r3, r0, #1
  4006aa:	4419      	add	r1, r3
  4006ac:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  4006b0:	1e43      	subs	r3, r0, #1
  4006b2:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  4006b4:	bf94      	ite	ls
  4006b6:	b200      	sxthls	r0, r0
		return -1;
  4006b8:	f04f 30ff 	movhi.w	r0, #4294967295
}
  4006bc:	4770      	bx	lr

004006be <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider)
  4006be:	b17a      	cbz	r2, 4006e0 <spi_set_baudrate_div+0x22>
{
  4006c0:	b410      	push	{r4}
  4006c2:	4614      	mov	r4, r2
  4006c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;

	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  4006c8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  4006ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  4006ce:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  4006d0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  4006d2:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  4006d6:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  4006d8:	2000      	movs	r0, #0
}
  4006da:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006de:	4770      	bx	lr
        return -1;
  4006e0:	f04f 30ff 	mov.w	r0, #4294967295
  4006e4:	4770      	bx	lr

004006e6 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
  4006e6:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  4006e8:	0189      	lsls	r1, r1, #6
  4006ea:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
  4006ec:	2402      	movs	r4, #2
  4006ee:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
  4006f0:	f04f 31ff 	mov.w	r1, #4294967295
  4006f4:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
  4006f6:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
  4006f8:	605a      	str	r2, [r3, #4]
}
  4006fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  4006fe:	4770      	bx	lr

00400700 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
  400700:	0189      	lsls	r1, r1, #6
  400702:	2305      	movs	r3, #5
  400704:	5043      	str	r3, [r0, r1]
  400706:	4770      	bx	lr

00400708 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
  400708:	eb00 1181 	add.w	r1, r0, r1, lsl #6
  40070c:	61ca      	str	r2, [r1, #28]
  40070e:	4770      	bx	lr

00400710 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400710:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
  400714:	624a      	str	r2, [r1, #36]	; 0x24
  400716:	4770      	bx	lr

00400718 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
  400718:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	return tc_channel->TC_SR;
  40071c:	6a08      	ldr	r0, [r1, #32]
}
  40071e:	4770      	bx	lr

00400720 <tc_find_mck_divisor>:
		uint32_t ul_freq,
		uint32_t ul_mck,
		uint32_t *p_uldiv,
		uint32_t *p_ultcclks,
		uint32_t ul_boardmck)
{
  400720:	b4f0      	push	{r4, r5, r6, r7}
  400722:	b086      	sub	sp, #24
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400724:	2402      	movs	r4, #2
  400726:	9401      	str	r4, [sp, #4]
  400728:	2408      	movs	r4, #8
  40072a:	9402      	str	r4, [sp, #8]
  40072c:	2420      	movs	r4, #32
  40072e:	9403      	str	r4, [sp, #12]
  400730:	2480      	movs	r4, #128	; 0x80
  400732:	9404      	str	r4, [sp, #16]
			ul_boardmck / FREQ_SLOW_CLOCK_EXT };
  400734:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  400736:	0be4      	lsrs	r4, r4, #15
	const uint32_t divisors[5] = { 2, 8, 32, 128,
  400738:	9405      	str	r4, [sp, #20]
	for (ul_index = 0;
			ul_index < (sizeof(divisors) / sizeof(divisors[0]));
			ul_index++) {
		ul_high = ul_mck / divisors[ul_index];
		ul_low  = ul_high / TC_DIV_FACTOR;
		if (ul_freq > ul_high) {
  40073a:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
  40073e:	d814      	bhi.n	40076a <tc_find_mck_divisor+0x4a>
  400740:	0c4c      	lsrs	r4, r1, #17
			return 0;
		} else if (ul_freq >= ul_low) {
  400742:	42a0      	cmp	r0, r4
  400744:	d217      	bcs.n	400776 <tc_find_mck_divisor+0x56>
  400746:	2501      	movs	r5, #1
		ul_high = ul_mck / divisors[ul_index];
  400748:	af01      	add	r7, sp, #4
  40074a:	f857 4025 	ldr.w	r4, [r7, r5, lsl #2]
  40074e:	fbb1 f4f4 	udiv	r4, r1, r4
		ul_low  = ul_high / TC_DIV_FACTOR;
  400752:	0c26      	lsrs	r6, r4, #16
		if (ul_freq > ul_high) {
  400754:	4284      	cmp	r4, r0
  400756:	d30a      	bcc.n	40076e <tc_find_mck_divisor+0x4e>
		} else if (ul_freq >= ul_low) {
  400758:	4286      	cmp	r6, r0
  40075a:	d90d      	bls.n	400778 <tc_find_mck_divisor+0x58>
			ul_index++) {
  40075c:	3501      	adds	r5, #1
	for (ul_index = 0;
  40075e:	2d05      	cmp	r5, #5
  400760:	d1f3      	bne.n	40074a <tc_find_mck_divisor+0x2a>
			break;
		}
	}
	if (ul_index >= (sizeof(divisors) / sizeof(divisors[0]))) {
		return 0;
  400762:	2000      	movs	r0, #0
	if (p_ultcclks) {
		*p_ultcclks = ul_index;
	}

	return 1;
}
  400764:	b006      	add	sp, #24
  400766:	bcf0      	pop	{r4, r5, r6, r7}
  400768:	4770      	bx	lr
			return 0;
  40076a:	2000      	movs	r0, #0
  40076c:	e7fa      	b.n	400764 <tc_find_mck_divisor+0x44>
  40076e:	2000      	movs	r0, #0
  400770:	e7f8      	b.n	400764 <tc_find_mck_divisor+0x44>
	return 1;
  400772:	2001      	movs	r0, #1
  400774:	e7f6      	b.n	400764 <tc_find_mck_divisor+0x44>
	for (ul_index = 0;
  400776:	2500      	movs	r5, #0
	if (p_uldiv) {
  400778:	b12a      	cbz	r2, 400786 <tc_find_mck_divisor+0x66>
		*p_uldiv = divisors[ul_index];
  40077a:	a906      	add	r1, sp, #24
  40077c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
  400780:	f851 1c14 	ldr.w	r1, [r1, #-20]
  400784:	6011      	str	r1, [r2, #0]
	if (p_ultcclks) {
  400786:	2b00      	cmp	r3, #0
  400788:	d0f3      	beq.n	400772 <tc_find_mck_divisor+0x52>
		*p_ultcclks = ul_index;
  40078a:	601d      	str	r5, [r3, #0]
	return 1;
  40078c:	2001      	movs	r0, #1
  40078e:	e7e9      	b.n	400764 <tc_find_mck_divisor+0x44>

00400790 <gfx_mono_set_framebuffer>:
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
	fbpointer = framebuffer;
  400790:	4b01      	ldr	r3, [pc, #4]	; (400798 <gfx_mono_set_framebuffer+0x8>)
  400792:	6018      	str	r0, [r3, #0]
  400794:	4770      	bx	lr
  400796:	bf00      	nop
  400798:	2040046c 	.word	0x2040046c

0040079c <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
  40079c:	4b02      	ldr	r3, [pc, #8]	; (4007a8 <gfx_mono_framebuffer_put_byte+0xc>)
  40079e:	681b      	ldr	r3, [r3, #0]
  4007a0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
  4007a4:	5442      	strb	r2, [r0, r1]
  4007a6:	4770      	bx	lr
  4007a8:	2040046c 	.word	0x2040046c

004007ac <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
  4007ac:	4b02      	ldr	r3, [pc, #8]	; (4007b8 <gfx_mono_framebuffer_get_byte+0xc>)
  4007ae:	681b      	ldr	r3, [r3, #0]
  4007b0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
  4007b4:	5c40      	ldrb	r0, [r0, r1]
  4007b6:	4770      	bx	lr
  4007b8:	2040046c 	.word	0x2040046c

004007bc <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
  4007bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
  4007c0:	1884      	adds	r4, r0, r2
  4007c2:	2c80      	cmp	r4, #128	; 0x80
  4007c4:	dd02      	ble.n	4007cc <gfx_mono_generic_draw_horizontal_line+0x10>
		length = GFX_MONO_LCD_WIDTH - x;
  4007c6:	f1c0 0480 	rsb	r4, r0, #128	; 0x80
  4007ca:	b2e2      	uxtb	r2, r4
	}

	page = y / 8;
	pixelmask = (1 << (y - (page * 8)));

	if (length == 0) {
  4007cc:	b322      	cbz	r2, 400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
	page = y / 8;
  4007ce:	08cd      	lsrs	r5, r1, #3
	pixelmask = (1 << (y - (page * 8)));
  4007d0:	eba1 01c5 	sub.w	r1, r1, r5, lsl #3
  4007d4:	2601      	movs	r6, #1
  4007d6:	fa06 f101 	lsl.w	r1, r6, r1
  4007da:	b2ce      	uxtb	r6, r1
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
  4007dc:	2b01      	cmp	r3, #1
  4007de:	d01d      	beq.n	40081c <gfx_mono_generic_draw_horizontal_line+0x60>
  4007e0:	2b00      	cmp	r3, #0
  4007e2:	d035      	beq.n	400850 <gfx_mono_generic_draw_horizontal_line+0x94>
  4007e4:	2b02      	cmp	r3, #2
  4007e6:	d117      	bne.n	400818 <gfx_mono_generic_draw_horizontal_line+0x5c>
  4007e8:	3801      	subs	r0, #1
  4007ea:	b2c7      	uxtb	r7, r0
  4007ec:	19d4      	adds	r4, r2, r7
  4007ee:	b2e4      	uxtb	r4, r4
		}
		break;

	case GFX_PIXEL_XOR:
		while (length-- > 0) {
			temp = gfx_mono_get_byte(page, x + length);
  4007f0:	f8df a090 	ldr.w	sl, [pc, #144]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp ^= pixelmask;
			gfx_mono_put_byte(page, x + length, temp);
  4007f4:	f04f 0900 	mov.w	r9, #0
  4007f8:	f8df 808c 	ldr.w	r8, [pc, #140]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  4007fc:	4621      	mov	r1, r4
  4007fe:	4628      	mov	r0, r5
  400800:	47d0      	blx	sl
			temp ^= pixelmask;
  400802:	ea86 0200 	eor.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  400806:	464b      	mov	r3, r9
  400808:	b2d2      	uxtb	r2, r2
  40080a:	4621      	mov	r1, r4
  40080c:	4628      	mov	r0, r5
  40080e:	47c0      	blx	r8
  400810:	3c01      	subs	r4, #1
  400812:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400814:	42bc      	cmp	r4, r7
  400816:	d1f1      	bne.n	4007fc <gfx_mono_generic_draw_horizontal_line+0x40>
  400818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40081c:	3801      	subs	r0, #1
  40081e:	b2c7      	uxtb	r7, r0
  400820:	19d4      	adds	r4, r2, r7
  400822:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400824:	f8df a05c 	ldr.w	sl, [pc, #92]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			gfx_mono_put_byte(page, x + length, temp);
  400828:	f04f 0900 	mov.w	r9, #0
  40082c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400830:	4621      	mov	r1, r4
  400832:	4628      	mov	r0, r5
  400834:	47d0      	blx	sl
			temp |= pixelmask;
  400836:	ea46 0200 	orr.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40083a:	464b      	mov	r3, r9
  40083c:	b2d2      	uxtb	r2, r2
  40083e:	4621      	mov	r1, r4
  400840:	4628      	mov	r0, r5
  400842:	47c0      	blx	r8
  400844:	3c01      	subs	r4, #1
  400846:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  400848:	42bc      	cmp	r4, r7
  40084a:	d1f1      	bne.n	400830 <gfx_mono_generic_draw_horizontal_line+0x74>
  40084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400850:	3801      	subs	r0, #1
  400852:	b2c7      	uxtb	r7, r0
  400854:	19d4      	adds	r4, r2, r7
  400856:	b2e4      	uxtb	r4, r4
			temp = gfx_mono_get_byte(page, x + length);
  400858:	f8df 8028 	ldr.w	r8, [pc, #40]	; 400884 <gfx_mono_generic_draw_horizontal_line+0xc8>
			temp &= ~pixelmask;
  40085c:	43ce      	mvns	r6, r1
			gfx_mono_put_byte(page, x + length, temp);
  40085e:	f8df 9028 	ldr.w	r9, [pc, #40]	; 400888 <gfx_mono_generic_draw_horizontal_line+0xcc>
			temp = gfx_mono_get_byte(page, x + length);
  400862:	4621      	mov	r1, r4
  400864:	4628      	mov	r0, r5
  400866:	47c0      	blx	r8
			temp &= ~pixelmask;
  400868:	ea06 0200 	and.w	r2, r6, r0
			gfx_mono_put_byte(page, x + length, temp);
  40086c:	2300      	movs	r3, #0
  40086e:	b2d2      	uxtb	r2, r2
  400870:	4621      	mov	r1, r4
  400872:	4628      	mov	r0, r5
  400874:	47c8      	blx	r9
  400876:	3c01      	subs	r4, #1
  400878:	b2e4      	uxtb	r4, r4
		while (length-- > 0) {
  40087a:	42bc      	cmp	r4, r7
  40087c:	d1f1      	bne.n	400862 <gfx_mono_generic_draw_horizontal_line+0xa6>
  40087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400882:	bf00      	nop
  400884:	00400cc9 	.word	0x00400cc9
  400888:	00400bc5 	.word	0x00400bc5

0040088c <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
	if (length == 0) {
  40088c:	2a00      	cmp	r2, #0
  40088e:	d048      	beq.n	400922 <gfx_mono_generic_draw_vertical_line+0x96>
{
  400890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400894:	4614      	mov	r4, r2
  400896:	461f      	mov	r7, r3
  400898:	4606      	mov	r6, r0
		return;
	}

	gfx_coord_t y2 = y + length - 1;
  40089a:	1e4a      	subs	r2, r1, #1
  40089c:	4422      	add	r2, r4
  40089e:	b2d2      	uxtb	r2, r2

	if (y == y2) {
  4008a0:	4291      	cmp	r1, r2
  4008a2:	d031      	beq.n	400908 <gfx_mono_generic_draw_vertical_line+0x7c>
  4008a4:	2a1f      	cmp	r2, #31
  4008a6:	bf28      	it	cs
  4008a8:	221f      	movcs	r2, #31
  4008aa:	4615      	mov	r5, r2

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
		y2 = GFX_MONO_LCD_HEIGHT - 1;
	}

	gfx_coord_t y1page = y / 8;
  4008ac:	08cc      	lsrs	r4, r1, #3
	gfx_coord_t y2page = y2 / 8;
  4008ae:	ea4f 08d2 	mov.w	r8, r2, lsr #3

	uint8_t y1bitpos = y & 0x07;
	uint8_t y2bitpos = y2 & 0x07;

	uint8_t y1pixelmask = 0xFF << y1bitpos;
  4008b2:	f001 0207 	and.w	r2, r1, #7
  4008b6:	23ff      	movs	r3, #255	; 0xff
  4008b8:	fa03 f202 	lsl.w	r2, r3, r2
  4008bc:	b2d2      	uxtb	r2, r2
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
  4008be:	f005 0507 	and.w	r5, r5, #7
  4008c2:	f1c5 0507 	rsb	r5, r5, #7
  4008c6:	fa43 f505 	asr.w	r5, r3, r5
  4008ca:	b2ed      	uxtb	r5, r5

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
  4008cc:	4544      	cmp	r4, r8
  4008ce:	d020      	beq.n	400912 <gfx_mono_generic_draw_vertical_line+0x86>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
  4008d0:	463b      	mov	r3, r7
  4008d2:	4601      	mov	r1, r0
  4008d4:	4620      	mov	r0, r4
  4008d6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 400924 <gfx_mono_generic_draw_vertical_line+0x98>
  4008da:	47c8      	blx	r9

		while (++y1page < y2page) {
  4008dc:	3401      	adds	r4, #1
  4008de:	45a0      	cmp	r8, r4
  4008e0:	d90a      	bls.n	4008f8 <gfx_mono_generic_draw_vertical_line+0x6c>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
  4008e2:	f04f 0aff 	mov.w	sl, #255	; 0xff
  4008e6:	463b      	mov	r3, r7
  4008e8:	4652      	mov	r2, sl
  4008ea:	4631      	mov	r1, r6
  4008ec:	4620      	mov	r0, r4
  4008ee:	47c8      	blx	r9
		while (++y1page < y2page) {
  4008f0:	3401      	adds	r4, #1
  4008f2:	b2e4      	uxtb	r4, r4
  4008f4:	45a0      	cmp	r8, r4
  4008f6:	d8f6      	bhi.n	4008e6 <gfx_mono_generic_draw_vertical_line+0x5a>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
  4008f8:	463b      	mov	r3, r7
  4008fa:	462a      	mov	r2, r5
  4008fc:	4631      	mov	r1, r6
  4008fe:	4640      	mov	r0, r8
  400900:	4c08      	ldr	r4, [pc, #32]	; (400924 <gfx_mono_generic_draw_vertical_line+0x98>)
  400902:	47a0      	blx	r4
  400904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_draw_pixel(x, y, color);
  400908:	461a      	mov	r2, r3
  40090a:	4b07      	ldr	r3, [pc, #28]	; (400928 <gfx_mono_generic_draw_vertical_line+0x9c>)
  40090c:	4798      	blx	r3
		return;
  40090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
  400912:	463b      	mov	r3, r7
  400914:	402a      	ands	r2, r5
  400916:	4601      	mov	r1, r0
  400918:	4620      	mov	r0, r4
  40091a:	4c02      	ldr	r4, [pc, #8]	; (400924 <gfx_mono_generic_draw_vertical_line+0x98>)
  40091c:	47a0      	blx	r4
  40091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  400922:	4770      	bx	lr
  400924:	00400cd5 	.word	0x00400cd5
  400928:	00400c65 	.word	0x00400c65

0040092c <gfx_mono_generic_draw_rect>:
 * \param[in] color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40092c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400930:	4604      	mov	r4, r0
  400932:	460f      	mov	r7, r1
  400934:	4616      	mov	r6, r2
  400936:	4698      	mov	r8, r3
  400938:	f89d 5020 	ldrb.w	r5, [sp, #32]
	gfx_mono_draw_horizontal_line(x, y, width, color);
  40093c:	462b      	mov	r3, r5
  40093e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 400974 <gfx_mono_generic_draw_rect+0x48>
  400942:	47c8      	blx	r9
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);
  400944:	f108 31ff 	add.w	r1, r8, #4294967295
  400948:	4439      	add	r1, r7
  40094a:	462b      	mov	r3, r5
  40094c:	4632      	mov	r2, r6
  40094e:	b2c9      	uxtb	r1, r1
  400950:	4620      	mov	r0, r4
  400952:	47c8      	blx	r9

	gfx_mono_draw_vertical_line(x, y, height, color);
  400954:	462b      	mov	r3, r5
  400956:	4642      	mov	r2, r8
  400958:	4639      	mov	r1, r7
  40095a:	4620      	mov	r0, r4
  40095c:	f8df 9018 	ldr.w	r9, [pc, #24]	; 400978 <gfx_mono_generic_draw_rect+0x4c>
  400960:	47c8      	blx	r9
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
  400962:	1e70      	subs	r0, r6, #1
  400964:	4420      	add	r0, r4
  400966:	462b      	mov	r3, r5
  400968:	4642      	mov	r2, r8
  40096a:	4639      	mov	r1, r7
  40096c:	b2c0      	uxtb	r0, r0
  40096e:	47c8      	blx	r9
  400970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400974:	004007bd 	.word	0x004007bd
  400978:	0040088d 	.word	0x0040088d

0040097c <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
  40097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400980:	f89d 7020 	ldrb.w	r7, [sp, #32]
	if (height == 0) {
  400984:	b18b      	cbz	r3, 4009aa <gfx_mono_generic_draw_filled_rect+0x2e>
  400986:	461c      	mov	r4, r3
  400988:	4690      	mov	r8, r2
  40098a:	4606      	mov	r6, r0
  40098c:	1e4d      	subs	r5, r1, #1
  40098e:	b2ed      	uxtb	r5, r5
  400990:	442c      	add	r4, r5
  400992:	b2e4      	uxtb	r4, r4
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
  400994:	f8df 9018 	ldr.w	r9, [pc, #24]	; 4009b0 <gfx_mono_generic_draw_filled_rect+0x34>
  400998:	463b      	mov	r3, r7
  40099a:	4642      	mov	r2, r8
  40099c:	4621      	mov	r1, r4
  40099e:	4630      	mov	r0, r6
  4009a0:	47c8      	blx	r9
  4009a2:	3c01      	subs	r4, #1
  4009a4:	b2e4      	uxtb	r4, r4
	while (height-- > 0) {
  4009a6:	42ac      	cmp	r4, r5
  4009a8:	d1f6      	bne.n	400998 <gfx_mono_generic_draw_filled_rect+0x1c>
  4009aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4009ae:	bf00      	nop
  4009b0:	004007bd 	.word	0x004007bd

004009b4 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
  4009b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4009b8:	b085      	sub	sp, #20
  4009ba:	4681      	mov	r9, r0
  4009bc:	9100      	str	r1, [sp, #0]
  4009be:	9301      	str	r3, [sp, #4]
  4009c0:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
  4009c4:	b17a      	cbz	r2, 4009e6 <gfx_mono_generic_draw_filled_circle+0x32>
  4009c6:	4616      	mov	r6, r2
	}

	/* Set up start iterators. */
	offset_x = 0;
	offset_y = radius;
	error = 3 - 2 * radius;
  4009c8:	0055      	lsls	r5, r2, #1
  4009ca:	f1c5 0503 	rsb	r5, r5, #3
  4009ce:	2701      	movs	r7, #1
  4009d0:	f04f 0800 	mov.w	r8, #0

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
  4009d4:	f00b 0303 	and.w	r3, fp, #3
  4009d8:	9302      	str	r3, [sp, #8]
			gfx_mono_draw_vertical_line(x + offset_y,
  4009da:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 400acc <gfx_mono_generic_draw_filled_circle+0x118>
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
  4009de:	f00b 030c 	and.w	r3, fp, #12
  4009e2:	9303      	str	r3, [sp, #12]
  4009e4:	e04d      	b.n	400a82 <gfx_mono_generic_draw_filled_circle+0xce>
		gfx_mono_draw_pixel(x, y, color);
  4009e6:	461a      	mov	r2, r3
  4009e8:	4b37      	ldr	r3, [pc, #220]	; (400ac8 <gfx_mono_generic_draw_filled_circle+0x114>)
  4009ea:	4798      	blx	r3
		}

		/* Next X. */
		++offset_x;
	}
}
  4009ec:	b005      	add	sp, #20
  4009ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			gfx_mono_draw_vertical_line(x + offset_y,
  4009f2:	9b00      	ldr	r3, [sp, #0]
  4009f4:	1b19      	subs	r1, r3, r4
  4009f6:	eb09 0006 	add.w	r0, r9, r6
  4009fa:	9b01      	ldr	r3, [sp, #4]
  4009fc:	463a      	mov	r2, r7
  4009fe:	b2c9      	uxtb	r1, r1
  400a00:	b2c0      	uxtb	r0, r0
  400a02:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400a04:	1c72      	adds	r2, r6, #1
  400a06:	9900      	ldr	r1, [sp, #0]
  400a08:	1b89      	subs	r1, r1, r6
  400a0a:	eb09 0004 	add.w	r0, r9, r4
  400a0e:	9b01      	ldr	r3, [sp, #4]
  400a10:	b2d2      	uxtb	r2, r2
  400a12:	b2c9      	uxtb	r1, r1
  400a14:	b2c0      	uxtb	r0, r0
  400a16:	47d0      	blx	sl
  400a18:	e038      	b.n	400a8c <gfx_mono_generic_draw_filled_circle+0xd8>
			gfx_mono_draw_vertical_line(x - offset_y,
  400a1a:	9b00      	ldr	r3, [sp, #0]
  400a1c:	1b19      	subs	r1, r3, r4
  400a1e:	eba9 0006 	sub.w	r0, r9, r6
  400a22:	9b01      	ldr	r3, [sp, #4]
  400a24:	463a      	mov	r2, r7
  400a26:	b2c9      	uxtb	r1, r1
  400a28:	b2c0      	uxtb	r0, r0
  400a2a:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400a2c:	1c72      	adds	r2, r6, #1
  400a2e:	9900      	ldr	r1, [sp, #0]
  400a30:	1b89      	subs	r1, r1, r6
  400a32:	eba9 0004 	sub.w	r0, r9, r4
  400a36:	9b01      	ldr	r3, [sp, #4]
  400a38:	b2d2      	uxtb	r2, r2
  400a3a:	b2c9      	uxtb	r1, r1
  400a3c:	b2c0      	uxtb	r0, r0
  400a3e:	47d0      	blx	sl
  400a40:	e027      	b.n	400a92 <gfx_mono_generic_draw_filled_circle+0xde>
			gfx_mono_draw_vertical_line(x - offset_y,
  400a42:	eba9 0006 	sub.w	r0, r9, r6
  400a46:	9b01      	ldr	r3, [sp, #4]
  400a48:	463a      	mov	r2, r7
  400a4a:	9900      	ldr	r1, [sp, #0]
  400a4c:	b2c0      	uxtb	r0, r0
  400a4e:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x - offset_x,
  400a50:	1c72      	adds	r2, r6, #1
  400a52:	eba9 0004 	sub.w	r0, r9, r4
  400a56:	9b01      	ldr	r3, [sp, #4]
  400a58:	b2d2      	uxtb	r2, r2
  400a5a:	9900      	ldr	r1, [sp, #0]
  400a5c:	b2c0      	uxtb	r0, r0
  400a5e:	47d0      	blx	sl
  400a60:	e01a      	b.n	400a98 <gfx_mono_generic_draw_filled_circle+0xe4>
		if (error < 0) {
  400a62:	2d00      	cmp	r5, #0
  400a64:	db2b      	blt.n	400abe <gfx_mono_generic_draw_filled_circle+0x10a>
			error += (((offset_x - offset_y) << 2) + 10);
  400a66:	1ba4      	subs	r4, r4, r6
  400a68:	350a      	adds	r5, #10
  400a6a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
  400a6e:	b225      	sxth	r5, r4
			--offset_y;
  400a70:	3e01      	subs	r6, #1
  400a72:	b2f6      	uxtb	r6, r6
  400a74:	f108 0801 	add.w	r8, r8, #1
  400a78:	1c7b      	adds	r3, r7, #1
  400a7a:	b2db      	uxtb	r3, r3
	while (offset_x <= offset_y) {
  400a7c:	42be      	cmp	r6, r7
  400a7e:	d3b5      	bcc.n	4009ec <gfx_mono_generic_draw_filled_circle+0x38>
  400a80:	461f      	mov	r7, r3
  400a82:	fa5f f488 	uxtb.w	r4, r8
		if (quadrant_mask & GFX_QUADRANT0) {
  400a86:	9b02      	ldr	r3, [sp, #8]
  400a88:	2b00      	cmp	r3, #0
  400a8a:	d1b2      	bne.n	4009f2 <gfx_mono_generic_draw_filled_circle+0x3e>
		if (quadrant_mask & GFX_QUADRANT1) {
  400a8c:	9b03      	ldr	r3, [sp, #12]
  400a8e:	2b00      	cmp	r3, #0
  400a90:	d1c3      	bne.n	400a1a <gfx_mono_generic_draw_filled_circle+0x66>
		if (quadrant_mask & GFX_QUADRANT2) {
  400a92:	f01b 0f30 	tst.w	fp, #48	; 0x30
  400a96:	d1d4      	bne.n	400a42 <gfx_mono_generic_draw_filled_circle+0x8e>
		if (quadrant_mask & GFX_QUADRANT3) {
  400a98:	f01b 0fc0 	tst.w	fp, #192	; 0xc0
  400a9c:	d0e1      	beq.n	400a62 <gfx_mono_generic_draw_filled_circle+0xae>
			gfx_mono_draw_vertical_line(x + offset_y,
  400a9e:	eb09 0006 	add.w	r0, r9, r6
  400aa2:	9b01      	ldr	r3, [sp, #4]
  400aa4:	463a      	mov	r2, r7
  400aa6:	9900      	ldr	r1, [sp, #0]
  400aa8:	b2c0      	uxtb	r0, r0
  400aaa:	47d0      	blx	sl
			gfx_mono_draw_vertical_line(x + offset_x,
  400aac:	1c72      	adds	r2, r6, #1
  400aae:	eb09 0004 	add.w	r0, r9, r4
  400ab2:	9b01      	ldr	r3, [sp, #4]
  400ab4:	b2d2      	uxtb	r2, r2
  400ab6:	9900      	ldr	r1, [sp, #0]
  400ab8:	b2c0      	uxtb	r0, r0
  400aba:	47d0      	blx	sl
  400abc:	e7d1      	b.n	400a62 <gfx_mono_generic_draw_filled_circle+0xae>
			error += ((offset_x << 2) + 6);
  400abe:	3506      	adds	r5, #6
  400ac0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
  400ac4:	b22d      	sxth	r5, r5
  400ac6:	e7d5      	b.n	400a74 <gfx_mono_generic_draw_filled_circle+0xc0>
  400ac8:	00400c65 	.word	0x00400c65
  400acc:	0040088d 	.word	0x0040088d

00400ad0 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
  400ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400ad4:	b083      	sub	sp, #12
  400ad6:	4604      	mov	r4, r0
  400ad8:	4688      	mov	r8, r1
  400ada:	4691      	mov	r9, r2
  400adc:	469b      	mov	fp, r3
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
  400ade:	7a5b      	ldrb	r3, [r3, #9]
  400ae0:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400ae4:	2100      	movs	r1, #0
  400ae6:	9100      	str	r1, [sp, #0]
  400ae8:	4649      	mov	r1, r9
  400aea:	4640      	mov	r0, r8
  400aec:	4d21      	ldr	r5, [pc, #132]	; (400b74 <gfx_mono_draw_char+0xa4>)
  400aee:	47a8      	blx	r5
			GFX_PIXEL_CLR);

	switch (font->type) {
  400af0:	f89b 3000 	ldrb.w	r3, [fp]
  400af4:	b113      	cbz	r3, 400afc <gfx_mono_draw_char+0x2c>
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
	}
}
  400af6:	b003      	add	sp, #12
  400af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
  400afc:	f89b 2008 	ldrb.w	r2, [fp, #8]
  400b00:	08d3      	lsrs	r3, r2, #3
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
  400b02:	f012 0f07 	tst.w	r2, #7
		char_row_size++;
  400b06:	bf18      	it	ne
  400b08:	3301      	addne	r3, #1
	glyph_data_offset = char_row_size * font->height *
  400b0a:	f89b a009 	ldrb.w	sl, [fp, #9]
			((uint8_t)ch - font->first_char);
  400b0e:	f89b 700a 	ldrb.w	r7, [fp, #10]
  400b12:	1be7      	subs	r7, r4, r7
	glyph_data_offset = char_row_size * font->height *
  400b14:	fb17 f70a 	smulbb	r7, r7, sl
  400b18:	fb17 f703 	smulbb	r7, r7, r3
	glyph_data = font->data.progmem + glyph_data_offset;
  400b1c:	f8db 3004 	ldr.w	r3, [fp, #4]
  400b20:	fa13 f787 	uxtah	r7, r3, r7
  400b24:	e01f      	b.n	400b66 <gfx_mono_draw_char+0x96>
			glyph_byte <<= 1;
  400b26:	0064      	lsls	r4, r4, #1
  400b28:	b2e4      	uxtb	r4, r4
  400b2a:	3501      	adds	r5, #1
		for (i = 0; i < pixelsToDraw; i++) {
  400b2c:	b2eb      	uxtb	r3, r5
  400b2e:	429e      	cmp	r6, r3
  400b30:	d910      	bls.n	400b54 <gfx_mono_draw_char+0x84>
  400b32:	b2eb      	uxtb	r3, r5
  400b34:	eb08 0003 	add.w	r0, r8, r3
  400b38:	b2c0      	uxtb	r0, r0
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
  400b3a:	f013 0f07 	tst.w	r3, #7
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
  400b3e:	bf08      	it	eq
  400b40:	f817 4b01 	ldrbeq.w	r4, [r7], #1
			if ((glyph_byte & 0x80)) {
  400b44:	f014 0f80 	tst.w	r4, #128	; 0x80
  400b48:	d0ed      	beq.n	400b26 <gfx_mono_draw_char+0x56>
				gfx_mono_draw_pixel(inc_x, inc_y,
  400b4a:	2201      	movs	r2, #1
  400b4c:	4649      	mov	r1, r9
  400b4e:	4b0a      	ldr	r3, [pc, #40]	; (400b78 <gfx_mono_draw_char+0xa8>)
  400b50:	4798      	blx	r3
  400b52:	e7e8      	b.n	400b26 <gfx_mono_draw_char+0x56>
		inc_y += 1;
  400b54:	f109 0901 	add.w	r9, r9, #1
  400b58:	fa5f f989 	uxtb.w	r9, r9
		rows_left--;
  400b5c:	f10a 3aff 	add.w	sl, sl, #4294967295
	} while (rows_left > 0);
  400b60:	f01a 0aff 	ands.w	sl, sl, #255	; 0xff
  400b64:	d0c7      	beq.n	400af6 <gfx_mono_draw_char+0x26>
		uint8_t pixelsToDraw = font->width;
  400b66:	f89b 6008 	ldrb.w	r6, [fp, #8]
		for (i = 0; i < pixelsToDraw; i++) {
  400b6a:	2e00      	cmp	r6, #0
  400b6c:	d0f2      	beq.n	400b54 <gfx_mono_draw_char+0x84>
  400b6e:	2500      	movs	r5, #0
  400b70:	462c      	mov	r4, r5
  400b72:	e7de      	b.n	400b32 <gfx_mono_draw_char+0x62>
  400b74:	0040097d 	.word	0x0040097d
  400b78:	00400c65 	.word	0x00400c65

00400b7c <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
  400b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  400b80:	4604      	mov	r4, r0
  400b82:	4690      	mov	r8, r2
  400b84:	461d      	mov	r5, r3
  400b86:	4689      	mov	r9, r1
			x = start_of_string_position_x;
			y += font->height + 1;
		} else if (*str == '\r') {
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
  400b88:	4f0d      	ldr	r7, [pc, #52]	; (400bc0 <gfx_mono_draw_string+0x44>)
			x = start_of_string_position_x;
  400b8a:	460e      	mov	r6, r1
  400b8c:	e008      	b.n	400ba0 <gfx_mono_draw_string+0x24>
			y += font->height + 1;
  400b8e:	7a6a      	ldrb	r2, [r5, #9]
  400b90:	3201      	adds	r2, #1
  400b92:	4442      	add	r2, r8
  400b94:	fa5f f882 	uxtb.w	r8, r2
			x = start_of_string_position_x;
  400b98:	46b1      	mov	r9, r6
			x += font->width;
		}
	} while (*(++str));
  400b9a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  400b9e:	b16b      	cbz	r3, 400bbc <gfx_mono_draw_string+0x40>
		if (*str == '\n') {
  400ba0:	7820      	ldrb	r0, [r4, #0]
  400ba2:	280a      	cmp	r0, #10
  400ba4:	d0f3      	beq.n	400b8e <gfx_mono_draw_string+0x12>
		} else if (*str == '\r') {
  400ba6:	280d      	cmp	r0, #13
  400ba8:	d0f7      	beq.n	400b9a <gfx_mono_draw_string+0x1e>
			gfx_mono_draw_char(*str, x, y, font);
  400baa:	462b      	mov	r3, r5
  400bac:	4642      	mov	r2, r8
  400bae:	4649      	mov	r1, r9
  400bb0:	47b8      	blx	r7
			x += font->width;
  400bb2:	7a2b      	ldrb	r3, [r5, #8]
  400bb4:	4499      	add	r9, r3
  400bb6:	fa5f f989 	uxtb.w	r9, r9
  400bba:	e7ee      	b.n	400b9a <gfx_mono_draw_string+0x1e>
}
  400bbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400bc0:	00400ad1 	.word	0x00400ad1

00400bc4 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
  400bc4:	b570      	push	{r4, r5, r6, lr}
  400bc6:	4604      	mov	r4, r0
  400bc8:	460d      	mov	r5, r1
  400bca:	4616      	mov	r6, r2
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
  400bcc:	b91b      	cbnz	r3, 400bd6 <gfx_mono_ssd1306_put_byte+0x12>
  400bce:	4b0d      	ldr	r3, [pc, #52]	; (400c04 <gfx_mono_ssd1306_put_byte+0x40>)
  400bd0:	4798      	blx	r3
  400bd2:	42b0      	cmp	r0, r6
  400bd4:	d015      	beq.n	400c02 <gfx_mono_ssd1306_put_byte+0x3e>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
  400bd6:	4632      	mov	r2, r6
  400bd8:	4629      	mov	r1, r5
  400bda:	4620      	mov	r0, r4
  400bdc:	4b0a      	ldr	r3, [pc, #40]	; (400c08 <gfx_mono_ssd1306_put_byte+0x44>)
  400bde:	4798      	blx	r3
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
  400be0:	f004 000f 	and.w	r0, r4, #15
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
  400be4:	f040 00b0 	orr.w	r0, r0, #176	; 0xb0
  400be8:	4c08      	ldr	r4, [pc, #32]	; (400c0c <gfx_mono_ssd1306_put_byte+0x48>)
  400bea:	47a0      	blx	r4
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4));
  400bec:	f3c5 1002 	ubfx	r0, r5, #4, #3
  400bf0:	f040 0010 	orr.w	r0, r0, #16
  400bf4:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
  400bf6:	f005 000f 	and.w	r0, r5, #15
  400bfa:	47a0      	blx	r4
#endif

	ssd1306_set_page_address(page);
	ssd1306_set_column_address(column);

	ssd1306_write_data(data);
  400bfc:	4630      	mov	r0, r6
  400bfe:	4b04      	ldr	r3, [pc, #16]	; (400c10 <gfx_mono_ssd1306_put_byte+0x4c>)
  400c00:	4798      	blx	r3
  400c02:	bd70      	pop	{r4, r5, r6, pc}
  400c04:	004007ad 	.word	0x004007ad
  400c08:	0040079d 	.word	0x0040079d
  400c0c:	00400d19 	.word	0x00400d19
  400c10:	00400f39 	.word	0x00400f39

00400c14 <gfx_mono_ssd1306_init>:
{
  400c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	gfx_mono_set_framebuffer(framebuffer);
  400c18:	480d      	ldr	r0, [pc, #52]	; (400c50 <gfx_mono_ssd1306_init+0x3c>)
  400c1a:	4b0e      	ldr	r3, [pc, #56]	; (400c54 <gfx_mono_ssd1306_init+0x40>)
  400c1c:	4798      	blx	r3
	ssd1306_init();
  400c1e:	4b0e      	ldr	r3, [pc, #56]	; (400c58 <gfx_mono_ssd1306_init+0x44>)
  400c20:	4798      	blx	r3
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
	// Make sure address is 6 bits
	address &= 0x3F;
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
  400c22:	2040      	movs	r0, #64	; 0x40
  400c24:	4b0d      	ldr	r3, [pc, #52]	; (400c5c <gfx_mono_ssd1306_init+0x48>)
  400c26:	4798      	blx	r3
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400c28:	2500      	movs	r5, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400c2a:	f04f 0801 	mov.w	r8, #1
  400c2e:	462f      	mov	r7, r5
  400c30:	4e0b      	ldr	r6, [pc, #44]	; (400c60 <gfx_mono_ssd1306_init+0x4c>)
{
  400c32:	2400      	movs	r4, #0
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
  400c34:	4643      	mov	r3, r8
  400c36:	463a      	mov	r2, r7
  400c38:	b2e1      	uxtb	r1, r4
  400c3a:	4628      	mov	r0, r5
  400c3c:	47b0      	blx	r6
  400c3e:	3401      	adds	r4, #1
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
  400c40:	2c80      	cmp	r4, #128	; 0x80
  400c42:	d1f7      	bne.n	400c34 <gfx_mono_ssd1306_init+0x20>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
  400c44:	3501      	adds	r5, #1
  400c46:	b2ed      	uxtb	r5, r5
  400c48:	2d04      	cmp	r5, #4
  400c4a:	d1f2      	bne.n	400c32 <gfx_mono_ssd1306_init+0x1e>
  400c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400c50:	20400470 	.word	0x20400470
  400c54:	00400791 	.word	0x00400791
  400c58:	00400d59 	.word	0x00400d59
  400c5c:	00400d19 	.word	0x00400d19
  400c60:	00400bc5 	.word	0x00400bc5

00400c64 <gfx_mono_ssd1306_draw_pixel>:
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
  400c64:	09c3      	lsrs	r3, r0, #7
  400c66:	d12a      	bne.n	400cbe <gfx_mono_ssd1306_draw_pixel+0x5a>
  400c68:	291f      	cmp	r1, #31
  400c6a:	d828      	bhi.n	400cbe <gfx_mono_ssd1306_draw_pixel+0x5a>
{
  400c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400c70:	4614      	mov	r4, r2
  400c72:	4605      	mov	r5, r0
	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
  400c74:	08ce      	lsrs	r6, r1, #3
	pixel_mask = (1 << (y - (page * 8)));
  400c76:	eba1 01c6 	sub.w	r1, r1, r6, lsl #3
  400c7a:	2201      	movs	r2, #1
  400c7c:	fa02 f701 	lsl.w	r7, r2, r1
  400c80:	fa5f f887 	uxtb.w	r8, r7
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
  400c84:	4601      	mov	r1, r0
  400c86:	4630      	mov	r0, r6
  400c88:	4b0d      	ldr	r3, [pc, #52]	; (400cc0 <gfx_mono_ssd1306_draw_pixel+0x5c>)
  400c8a:	4798      	blx	r3
  400c8c:	4602      	mov	r2, r0
	switch (color) {
  400c8e:	2c01      	cmp	r4, #1
  400c90:	d009      	beq.n	400ca6 <gfx_mono_ssd1306_draw_pixel+0x42>
  400c92:	b164      	cbz	r4, 400cae <gfx_mono_ssd1306_draw_pixel+0x4a>
  400c94:	2c02      	cmp	r4, #2
  400c96:	d00e      	beq.n	400cb6 <gfx_mono_ssd1306_draw_pixel+0x52>
	gfx_mono_put_byte(page, x, pixel_value);
  400c98:	2300      	movs	r3, #0
  400c9a:	4629      	mov	r1, r5
  400c9c:	4630      	mov	r0, r6
  400c9e:	4c09      	ldr	r4, [pc, #36]	; (400cc4 <gfx_mono_ssd1306_draw_pixel+0x60>)
  400ca0:	47a0      	blx	r4
  400ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pixel_value |= pixel_mask;
  400ca6:	ea48 0200 	orr.w	r2, r8, r0
  400caa:	b2d2      	uxtb	r2, r2
		break;
  400cac:	e7f4      	b.n	400c98 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value &= ~pixel_mask;
  400cae:	ea20 0207 	bic.w	r2, r0, r7
  400cb2:	b2d2      	uxtb	r2, r2
		break;
  400cb4:	e7f0      	b.n	400c98 <gfx_mono_ssd1306_draw_pixel+0x34>
		pixel_value ^= pixel_mask;
  400cb6:	ea88 0200 	eor.w	r2, r8, r0
  400cba:	b2d2      	uxtb	r2, r2
		break;
  400cbc:	e7ec      	b.n	400c98 <gfx_mono_ssd1306_draw_pixel+0x34>
  400cbe:	4770      	bx	lr
  400cc0:	004007ad 	.word	0x004007ad
  400cc4:	00400bc5 	.word	0x00400bc5

00400cc8 <gfx_mono_ssd1306_get_byte>:
{
  400cc8:	b508      	push	{r3, lr}
	return gfx_mono_framebuffer_get_byte(page, column);
  400cca:	4b01      	ldr	r3, [pc, #4]	; (400cd0 <gfx_mono_ssd1306_get_byte+0x8>)
  400ccc:	4798      	blx	r3
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
  400cce:	bd08      	pop	{r3, pc}
  400cd0:	004007ad 	.word	0x004007ad

00400cd4 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
  400cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  400cd6:	4605      	mov	r5, r0
  400cd8:	460e      	mov	r6, r1
  400cda:	4617      	mov	r7, r2
  400cdc:	461c      	mov	r4, r3
	return gfx_mono_framebuffer_get_byte(page, column);
  400cde:	4b0c      	ldr	r3, [pc, #48]	; (400d10 <gfx_mono_ssd1306_mask_byte+0x3c>)
  400ce0:	4798      	blx	r3
  400ce2:	4602      	mov	r2, r0
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);

	switch (color) {
  400ce4:	2c01      	cmp	r4, #1
  400ce6:	d008      	beq.n	400cfa <gfx_mono_ssd1306_mask_byte+0x26>
  400ce8:	b154      	cbz	r4, 400d00 <gfx_mono_ssd1306_mask_byte+0x2c>
  400cea:	2c02      	cmp	r4, #2
  400cec:	d00c      	beq.n	400d08 <gfx_mono_ssd1306_mask_byte+0x34>

	default:
		break;
	}

	gfx_mono_put_byte(page, column, temp);
  400cee:	2300      	movs	r3, #0
  400cf0:	4631      	mov	r1, r6
  400cf2:	4628      	mov	r0, r5
  400cf4:	4c07      	ldr	r4, [pc, #28]	; (400d14 <gfx_mono_ssd1306_mask_byte+0x40>)
  400cf6:	47a0      	blx	r4
  400cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		temp |= pixel_mask;
  400cfa:	433a      	orrs	r2, r7
  400cfc:	b2d2      	uxtb	r2, r2
		break;
  400cfe:	e7f6      	b.n	400cee <gfx_mono_ssd1306_mask_byte+0x1a>
		temp &= ~pixel_mask;
  400d00:	ea20 0207 	bic.w	r2, r0, r7
  400d04:	b2d2      	uxtb	r2, r2
		break;
  400d06:	e7f2      	b.n	400cee <gfx_mono_ssd1306_mask_byte+0x1a>
		temp ^= pixel_mask;
  400d08:	407a      	eors	r2, r7
  400d0a:	b2d2      	uxtb	r2, r2
		break;
  400d0c:	e7ef      	b.n	400cee <gfx_mono_ssd1306_mask_byte+0x1a>
  400d0e:	bf00      	nop
  400d10:	004007ad 	.word	0x004007ad
  400d14:	00400bc5 	.word	0x00400bc5

00400d18 <ssd1306_write_command>:
 * data write function is called based on the selected interface.
 *
 * \param command the command to write
 */
void ssd1306_write_command(uint8_t command)
{
  400d18:	b538      	push	{r3, r4, r5, lr}
  400d1a:	4605      	mov	r5, r0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400d1c:	2208      	movs	r2, #8
  400d1e:	4b09      	ldr	r3, [pc, #36]	; (400d44 <ssd1306_write_command+0x2c>)
  400d20:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(SSD1306_DC_PIN, false);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400d22:	4c09      	ldr	r4, [pc, #36]	; (400d48 <ssd1306_write_command+0x30>)
  400d24:	2101      	movs	r1, #1
  400d26:	4620      	mov	r0, r4
  400d28:	4b08      	ldr	r3, [pc, #32]	; (400d4c <ssd1306_write_command+0x34>)
  400d2a:	4798      	blx	r3
	spi_write(SPI0, command, 1, 1);
  400d2c:	2301      	movs	r3, #1
  400d2e:	461a      	mov	r2, r3
  400d30:	4629      	mov	r1, r5
  400d32:	4620      	mov	r0, r4
  400d34:	4c06      	ldr	r4, [pc, #24]	; (400d50 <ssd1306_write_command+0x38>)
  400d36:	47a0      	blx	r4
	delay_us(10);
  400d38:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400d3c:	4b05      	ldr	r3, [pc, #20]	; (400d54 <ssd1306_write_command+0x3c>)
  400d3e:	4798      	blx	r3
  400d40:	bd38      	pop	{r3, r4, r5, pc}
  400d42:	bf00      	nop
  400d44:	400e1000 	.word	0x400e1000
  400d48:	40008000 	.word	0x40008000
  400d4c:	004005c9 	.word	0x004005c9
  400d50:	004005df 	.word	0x004005df
  400d54:	20400001 	.word	0x20400001

00400d58 <ssd1306_init>:
{
  400d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d5c:	4d66      	ldr	r5, [pc, #408]	; (400ef8 <ssd1306_init+0x1a0>)
  400d5e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
  400d62:	612e      	str	r6, [r5, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d64:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  400d68:	4b64      	ldr	r3, [pc, #400]	; (400efc <ssd1306_init+0x1a4>)
  400d6a:	2708      	movs	r7, #8
  400d6c:	611f      	str	r7, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  400d6e:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  400d72:	666e      	str	r6, [r5, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d74:	f8c5 6090 	str.w	r6, [r5, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d78:	656e      	str	r6, [r5, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d7a:	626e      	str	r6, [r5, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d7c:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d80:	6f2a      	ldr	r2, [r5, #112]	; 0x70
  400d82:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d86:	672a      	str	r2, [r5, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400d88:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  400d8a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  400d8e:	676a      	str	r2, [r5, #116]	; 0x74
		base->PIO_PUER = mask;
  400d90:	665f      	str	r7, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  400d92:	f8c3 7090 	str.w	r7, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  400d96:	655f      	str	r7, [r3, #84]	; 0x54
		base->PIO_IFDR = mask;
  400d98:	625f      	str	r7, [r3, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400d9a:	f8c3 7080 	str.w	r7, [r3, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400d9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
  400da0:	f022 0208 	bic.w	r2, r2, #8
  400da4:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400da6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  400da8:	f022 0208 	bic.w	r2, r2, #8
  400dac:	675a      	str	r2, [r3, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PER = mask;
  400dae:	601f      	str	r7, [r3, #0]
  400db0:	602e      	str	r6, [r5, #0]
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400db2:	631f      	str	r7, [r3, #48]	; 0x30
  400db4:	632e      	str	r6, [r5, #48]	; 0x30
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400db6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 400f34 <ssd1306_init+0x1dc>
  400dba:	2300      	movs	r3, #0
  400dbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400dc0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dc4:	4640      	mov	r0, r8
  400dc6:	4c4e      	ldr	r4, [pc, #312]	; (400f00 <ssd1306_init+0x1a8>)
  400dc8:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400dca:	2300      	movs	r3, #0
  400dcc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dd0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dd4:	4640      	mov	r0, r8
  400dd6:	47a0      	blx	r4
	pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400dd8:	2300      	movs	r3, #0
  400dda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400dde:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400de2:	4640      	mov	r0, r8
  400de4:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CLK_MASK, PIO_DEFAULT);
  400de6:	2300      	movs	r3, #0
  400de8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  400dec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400df0:	4640      	mov	r0, r8
  400df2:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_MOSI_MASK, PIO_DEFAULT);
  400df4:	2300      	movs	r3, #0
  400df6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
  400dfa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400dfe:	4640      	mov	r0, r8
  400e00:	47a0      	blx	r4
		pio_configure(PIOD, PIO_PERIPH_B, 1 << SPI_CS_MASK, PIO_DEFAULT);
  400e02:	2300      	movs	r3, #0
  400e04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  400e08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400e0c:	4640      	mov	r0, r8
  400e0e:	47a0      	blx	r4
	p_spi->SPI_CR = SPI_CR_SPIDIS;
  400e10:	4c3c      	ldr	r4, [pc, #240]	; (400f04 <ssd1306_init+0x1ac>)
  400e12:	f04f 0902 	mov.w	r9, #2
  400e16:	f8c4 9000 	str.w	r9, [r4]
	p_spi->SPI_CR = SPI_CR_SWRST;
  400e1a:	f04f 0880 	mov.w	r8, #128	; 0x80
  400e1e:	f8c4 8000 	str.w	r8, [r4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
  400e22:	6863      	ldr	r3, [r4, #4]
  400e24:	f043 0301 	orr.w	r3, r3, #1
  400e28:	6063      	str	r3, [r4, #4]
		spi_configure_cs_behavior(SPI0, 1, SPI_CS_KEEP_LOW);
  400e2a:	463a      	mov	r2, r7
  400e2c:	2101      	movs	r1, #1
  400e2e:	4620      	mov	r0, r4
  400e30:	4b35      	ldr	r3, [pc, #212]	; (400f08 <ssd1306_init+0x1b0>)
  400e32:	4798      	blx	r3
		spi_set_clock_polarity(SPI0, 1, 0);
  400e34:	2200      	movs	r2, #0
  400e36:	2101      	movs	r1, #1
  400e38:	4620      	mov	r0, r4
  400e3a:	4b34      	ldr	r3, [pc, #208]	; (400f0c <ssd1306_init+0x1b4>)
  400e3c:	4798      	blx	r3
		spi_set_clock_phase(SPI0, 1, 0);
  400e3e:	2200      	movs	r2, #0
  400e40:	2101      	movs	r1, #1
  400e42:	4620      	mov	r0, r4
  400e44:	4b32      	ldr	r3, [pc, #200]	; (400f10 <ssd1306_init+0x1b8>)
  400e46:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  400e48:	6863      	ldr	r3, [r4, #4]
  400e4a:	f023 0302 	bic.w	r3, r3, #2
  400e4e:	6063      	str	r3, [r4, #4]
		spi_set_bits_per_transfer(SPI0, 1, SPI_CSR_BITS_8_BIT);
  400e50:	2200      	movs	r2, #0
  400e52:	2101      	movs	r1, #1
  400e54:	4620      	mov	r0, r4
  400e56:	4b2f      	ldr	r3, [pc, #188]	; (400f14 <ssd1306_init+0x1bc>)
  400e58:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  400e5a:	6863      	ldr	r3, [r4, #4]
  400e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  400e60:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  400e62:	6863      	ldr	r3, [r4, #4]
  400e64:	f043 0310 	orr.w	r3, r3, #16
  400e68:	6063      	str	r3, [r4, #4]
		int div = spi_calc_baudrate_div(2000000, sysclk_get_peripheral_hz());
  400e6a:	492b      	ldr	r1, [pc, #172]	; (400f18 <ssd1306_init+0x1c0>)
  400e6c:	482b      	ldr	r0, [pc, #172]	; (400f1c <ssd1306_init+0x1c4>)
  400e6e:	4b2c      	ldr	r3, [pc, #176]	; (400f20 <ssd1306_init+0x1c8>)
  400e70:	4798      	blx	r3
		spi_set_baudrate_div(SPI0,1, div);
  400e72:	b2c2      	uxtb	r2, r0
  400e74:	2101      	movs	r1, #1
  400e76:	4620      	mov	r0, r4
  400e78:	4b2a      	ldr	r3, [pc, #168]	; (400f24 <ssd1306_init+0x1cc>)
  400e7a:	4798      	blx	r3
		spi_enable_clock(SPI0);
  400e7c:	4620      	mov	r0, r4
  400e7e:	4b2a      	ldr	r3, [pc, #168]	; (400f28 <ssd1306_init+0x1d0>)
  400e80:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e82:	2301      	movs	r3, #1
  400e84:	6023      	str	r3, [r4, #0]
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
  400e86:	636e      	str	r6, [r5, #52]	; 0x34
	delay_cycles(delay_10us); // At lest 10us
  400e88:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e8c:	4c27      	ldr	r4, [pc, #156]	; (400f2c <ssd1306_init+0x1d4>)
  400e8e:	47a0      	blx	r4
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  400e90:	632e      	str	r6, [r5, #48]	; 0x30
	delay_cycles(delay_10us); // At lest 10us
  400e92:	f640 30b8 	movw	r0, #3000	; 0xbb8
  400e96:	47a0      	blx	r4
  400e98:	632e      	str	r6, [r5, #48]	; 0x30
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO);
  400e9a:	20a8      	movs	r0, #168	; 0xa8
  400e9c:	4c24      	ldr	r4, [pc, #144]	; (400f30 <ssd1306_init+0x1d8>)
  400e9e:	47a0      	blx	r4
	ssd1306_write_command(0x1F);
  400ea0:	201f      	movs	r0, #31
  400ea2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET);
  400ea4:	20d3      	movs	r0, #211	; 0xd3
  400ea6:	47a0      	blx	r4
	ssd1306_write_command(0x00);
  400ea8:	2000      	movs	r0, #0
  400eaa:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));
  400eac:	2040      	movs	r0, #64	; 0x40
  400eae:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL127_SEG0);
  400eb0:	20a1      	movs	r0, #161	; 0xa1
  400eb2:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN);
  400eb4:	20c8      	movs	r0, #200	; 0xc8
  400eb6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS);
  400eb8:	20da      	movs	r0, #218	; 0xda
  400eba:	47a0      	blx	r4
	ssd1306_write_command(0x02);
  400ebc:	4648      	mov	r0, r9
  400ebe:	47a0      	blx	r4
 *
 * \retval contrast the contrast value written to the OLED controller
 */
static inline uint8_t ssd1306_set_contrast(uint8_t contrast)
{
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0);
  400ec0:	2081      	movs	r0, #129	; 0x81
  400ec2:	47a0      	blx	r4
	ssd1306_write_command(contrast);
  400ec4:	208f      	movs	r0, #143	; 0x8f
  400ec6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON);
  400ec8:	20a4      	movs	r0, #164	; 0xa4
  400eca:	47a0      	blx	r4
 * This function will disable invert on all pixels on the OLED
 *
 */
static inline void ssd1306_display_invert_disable(void)
{
	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY);
  400ecc:	20a6      	movs	r0, #166	; 0xa6
  400ece:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO);
  400ed0:	20d5      	movs	r0, #213	; 0xd5
  400ed2:	47a0      	blx	r4
	ssd1306_write_command(0x80);
  400ed4:	4640      	mov	r0, r8
  400ed6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING);
  400ed8:	208d      	movs	r0, #141	; 0x8d
  400eda:	47a0      	blx	r4
	ssd1306_write_command(0x14);
  400edc:	2014      	movs	r0, #20
  400ede:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL);
  400ee0:	20db      	movs	r0, #219	; 0xdb
  400ee2:	47a0      	blx	r4
	ssd1306_write_command(0x40); // Default => 0x20 (0.77*VCC)
  400ee4:	2040      	movs	r0, #64	; 0x40
  400ee6:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD);
  400ee8:	20d9      	movs	r0, #217	; 0xd9
  400eea:	47a0      	blx	r4
	ssd1306_write_command(0xF1);
  400eec:	20f1      	movs	r0, #241	; 0xf1
  400eee:	47a0      	blx	r4
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
  400ef0:	20af      	movs	r0, #175	; 0xaf
  400ef2:	47a0      	blx	r4
  400ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400ef8:	400e1200 	.word	0x400e1200
  400efc:	400e1000 	.word	0x400e1000
  400f00:	00401221 	.word	0x00401221
  400f04:	40008000 	.word	0x40008000
  400f08:	0040064f 	.word	0x0040064f
  400f0c:	00400613 	.word	0x00400613
  400f10:	00400631 	.word	0x00400631
  400f14:	00400695 	.word	0x00400695
  400f18:	08f0d180 	.word	0x08f0d180
  400f1c:	001e8480 	.word	0x001e8480
  400f20:	004006a9 	.word	0x004006a9
  400f24:	004006bf 	.word	0x004006bf
  400f28:	0040059d 	.word	0x0040059d
  400f2c:	20400001 	.word	0x20400001
  400f30:	00400d19 	.word	0x00400d19
  400f34:	400e1400 	.word	0x400e1400

00400f38 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
  400f38:	b538      	push	{r3, r4, r5, lr}
  400f3a:	4605      	mov	r5, r0
  400f3c:	2208      	movs	r2, #8
  400f3e:	4b09      	ldr	r3, [pc, #36]	; (400f64 <ssd1306_write_data+0x2c>)
  400f40:	631a      	str	r2, [r3, #48]	; 0x30
	ioport_set_pin_level(SSD1306_DC_PIN, true);
	
	spi_set_peripheral_chip_select_value(SPI0, 1);
  400f42:	4c09      	ldr	r4, [pc, #36]	; (400f68 <ssd1306_write_data+0x30>)
  400f44:	2101      	movs	r1, #1
  400f46:	4620      	mov	r0, r4
  400f48:	4b08      	ldr	r3, [pc, #32]	; (400f6c <ssd1306_write_data+0x34>)
  400f4a:	4798      	blx	r3
	spi_write(SPI0, data, 1, 1);
  400f4c:	2301      	movs	r3, #1
  400f4e:	461a      	mov	r2, r3
  400f50:	4629      	mov	r1, r5
  400f52:	4620      	mov	r0, r4
  400f54:	4c06      	ldr	r4, [pc, #24]	; (400f70 <ssd1306_write_data+0x38>)
  400f56:	47a0      	blx	r4
	delay_us(10);
  400f58:	f44f 70fd 	mov.w	r0, #506	; 0x1fa
  400f5c:	4b05      	ldr	r3, [pc, #20]	; (400f74 <ssd1306_write_data+0x3c>)
  400f5e:	4798      	blx	r3
  400f60:	bd38      	pop	{r3, r4, r5, pc}
  400f62:	bf00      	nop
  400f64:	400e1000 	.word	0x400e1000
  400f68:	40008000 	.word	0x40008000
  400f6c:	004005c9 	.word	0x004005c9
  400f70:	004005df 	.word	0x004005df
  400f74:	20400001 	.word	0x20400001

00400f78 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  400f78:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  400f7a:	4810      	ldr	r0, [pc, #64]	; (400fbc <sysclk_init+0x44>)
  400f7c:	4b10      	ldr	r3, [pc, #64]	; (400fc0 <sysclk_init+0x48>)
  400f7e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400f80:	213e      	movs	r1, #62	; 0x3e
  400f82:	2000      	movs	r0, #0
  400f84:	4b0f      	ldr	r3, [pc, #60]	; (400fc4 <sysclk_init+0x4c>)
  400f86:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  400f88:	4c0f      	ldr	r4, [pc, #60]	; (400fc8 <sysclk_init+0x50>)
  400f8a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400f8c:	2800      	cmp	r0, #0
  400f8e:	d0fc      	beq.n	400f8a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400f90:	4b0e      	ldr	r3, [pc, #56]	; (400fcc <sysclk_init+0x54>)
  400f92:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400f94:	4a0e      	ldr	r2, [pc, #56]	; (400fd0 <sysclk_init+0x58>)
  400f96:	4b0f      	ldr	r3, [pc, #60]	; (400fd4 <sysclk_init+0x5c>)
  400f98:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  400f9a:	4c0f      	ldr	r4, [pc, #60]	; (400fd8 <sysclk_init+0x60>)
  400f9c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400f9e:	2800      	cmp	r0, #0
  400fa0:	d0fc      	beq.n	400f9c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400fa2:	2002      	movs	r0, #2
  400fa4:	4b0d      	ldr	r3, [pc, #52]	; (400fdc <sysclk_init+0x64>)
  400fa6:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  400fa8:	2000      	movs	r0, #0
  400faa:	4b0d      	ldr	r3, [pc, #52]	; (400fe0 <sysclk_init+0x68>)
  400fac:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400fae:	4b0d      	ldr	r3, [pc, #52]	; (400fe4 <sysclk_init+0x6c>)
  400fb0:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400fb2:	4802      	ldr	r0, [pc, #8]	; (400fbc <sysclk_init+0x44>)
  400fb4:	4b02      	ldr	r3, [pc, #8]	; (400fc0 <sysclk_init+0x48>)
  400fb6:	4798      	blx	r3
  400fb8:	bd10      	pop	{r4, pc}
  400fba:	bf00      	nop
  400fbc:	11e1a300 	.word	0x11e1a300
  400fc0:	004016c5 	.word	0x004016c5
  400fc4:	00401415 	.word	0x00401415
  400fc8:	00401469 	.word	0x00401469
  400fcc:	00401479 	.word	0x00401479
  400fd0:	20183f01 	.word	0x20183f01
  400fd4:	400e0600 	.word	0x400e0600
  400fd8:	00401489 	.word	0x00401489
  400fdc:	00401379 	.word	0x00401379
  400fe0:	004013b1 	.word	0x004013b1
  400fe4:	004015b9 	.word	0x004015b9

00400fe8 <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  400fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  400fea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400fee:	4b48      	ldr	r3, [pc, #288]	; (401110 <board_init+0x128>)
  400ff0:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  400ff2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400ff6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  400ffa:	4b46      	ldr	r3, [pc, #280]	; (401114 <board_init+0x12c>)
  400ffc:	2200      	movs	r2, #0
  400ffe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  401002:	695a      	ldr	r2, [r3, #20]
  401004:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  401008:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  40100a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40100e:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  401012:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  401016:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  40101a:	f007 0007 	and.w	r0, r7, #7
  40101e:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  401020:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  401024:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  401028:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  40102c:	f3bf 8f4f 	dsb	sy
  401030:	f04f 34ff 	mov.w	r4, #4294967295
  401034:	fa04 fc00 	lsl.w	ip, r4, r0
  401038:	fa06 f000 	lsl.w	r0, r6, r0
  40103c:	fa04 f40e 	lsl.w	r4, r4, lr
  401040:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  401044:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  401046:	463a      	mov	r2, r7
  401048:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  40104a:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  40104e:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  401052:	3a01      	subs	r2, #1
  401054:	4423      	add	r3, r4
  401056:	f1b2 3fff 	cmp.w	r2, #4294967295
  40105a:	d1f6      	bne.n	40104a <board_init+0x62>
        } while(sets--);
  40105c:	3e01      	subs	r6, #1
  40105e:	4460      	add	r0, ip
  401060:	f1b6 3fff 	cmp.w	r6, #4294967295
  401064:	d1ef      	bne.n	401046 <board_init+0x5e>
  401066:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  40106a:	4b2a      	ldr	r3, [pc, #168]	; (401114 <board_init+0x12c>)
  40106c:	695a      	ldr	r2, [r3, #20]
  40106e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  401072:	615a      	str	r2, [r3, #20]
  401074:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401078:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  40107c:	4a26      	ldr	r2, [pc, #152]	; (401118 <board_init+0x130>)
  40107e:	4927      	ldr	r1, [pc, #156]	; (40111c <board_init+0x134>)
  401080:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  401082:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  401086:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  401088:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40108c:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  401090:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  401094:	f022 0201 	bic.w	r2, r2, #1
  401098:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  40109c:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  4010a0:	f022 0201 	bic.w	r2, r2, #1
  4010a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  4010a8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4010ac:	f3bf 8f6f 	isb	sy
  4010b0:	200a      	movs	r0, #10
  4010b2:	4c1b      	ldr	r4, [pc, #108]	; (401120 <board_init+0x138>)
  4010b4:	47a0      	blx	r4
  4010b6:	200b      	movs	r0, #11
  4010b8:	47a0      	blx	r4
  4010ba:	200c      	movs	r0, #12
  4010bc:	47a0      	blx	r4
  4010be:	2010      	movs	r0, #16
  4010c0:	47a0      	blx	r4
  4010c2:	2011      	movs	r0, #17
  4010c4:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4010c6:	4b17      	ldr	r3, [pc, #92]	; (401124 <board_init+0x13c>)
  4010c8:	f44f 7280 	mov.w	r2, #256	; 0x100
  4010cc:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4010ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4010d2:	631a      	str	r2, [r3, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4010d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
  4010d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
  4010dc:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4010de:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_PUER = mask;
  4010e2:	665a      	str	r2, [r3, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4010e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		base->PIO_MDDR = mask;
  4010e8:	655a      	str	r2, [r3, #84]	; 0x54
		base->PIO_IFER = mask;
  4010ea:	621a      	str	r2, [r3, #32]
		base->PIO_IFSCER = mask;
  4010ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4010f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
  4010f2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4010f6:	6719      	str	r1, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4010f8:	6f59      	ldr	r1, [r3, #116]	; 0x74
  4010fa:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
  4010fe:	6759      	str	r1, [r3, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  401100:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  401104:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  401108:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  40110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  40110e:	bf00      	nop
  401110:	400e1850 	.word	0x400e1850
  401114:	e000ed00 	.word	0xe000ed00
  401118:	400e0c00 	.word	0x400e0c00
  40111c:	5a00080c 	.word	0x5a00080c
  401120:	00401499 	.word	0x00401499
  401124:	400e1200 	.word	0x400e1200

00401128 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401128:	6301      	str	r1, [r0, #48]	; 0x30
  40112a:	4770      	bx	lr

0040112c <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40112c:	6341      	str	r1, [r0, #52]	; 0x34
  40112e:	4770      	bx	lr

00401130 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401130:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401132:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401136:	d03a      	beq.n	4011ae <pio_set_peripheral+0x7e>
  401138:	d813      	bhi.n	401162 <pio_set_peripheral+0x32>
  40113a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40113e:	d025      	beq.n	40118c <pio_set_peripheral+0x5c>
  401140:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401144:	d10a      	bne.n	40115c <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  401146:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401148:	4313      	orrs	r3, r2
  40114a:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  40114c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40114e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401150:	400b      	ands	r3, r1
  401152:	ea23 0302 	bic.w	r3, r3, r2
  401156:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  401158:	6042      	str	r2, [r0, #4]
  40115a:	4770      	bx	lr
	switch (ul_type) {
  40115c:	2900      	cmp	r1, #0
  40115e:	d1fb      	bne.n	401158 <pio_set_peripheral+0x28>
  401160:	4770      	bx	lr
  401162:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401166:	d021      	beq.n	4011ac <pio_set_peripheral+0x7c>
  401168:	d809      	bhi.n	40117e <pio_set_peripheral+0x4e>
  40116a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40116e:	d1f3      	bne.n	401158 <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401170:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401172:	4313      	orrs	r3, r2
  401174:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  401176:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  401178:	4313      	orrs	r3, r2
  40117a:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  40117c:	e7ec      	b.n	401158 <pio_set_peripheral+0x28>
	switch (ul_type) {
  40117e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401182:	d013      	beq.n	4011ac <pio_set_peripheral+0x7c>
  401184:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401188:	d010      	beq.n	4011ac <pio_set_peripheral+0x7c>
  40118a:	e7e5      	b.n	401158 <pio_set_peripheral+0x28>
{
  40118c:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  40118e:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  401190:	6f04      	ldr	r4, [r0, #112]	; 0x70
  401192:	43d3      	mvns	r3, r2
  401194:	4021      	ands	r1, r4
  401196:	461c      	mov	r4, r3
  401198:	4019      	ands	r1, r3
  40119a:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40119c:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  40119e:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4011a0:	400b      	ands	r3, r1
  4011a2:	4023      	ands	r3, r4
  4011a4:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4011a6:	6042      	str	r2, [r0, #4]
}
  4011a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011ac:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011ae:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011b0:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4011b2:	400b      	ands	r3, r1
  4011b4:	ea23 0302 	bic.w	r3, r3, r2
  4011b8:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4011ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4011bc:	4313      	orrs	r3, r2
  4011be:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4011c0:	e7ca      	b.n	401158 <pio_set_peripheral+0x28>

004011c2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4011c2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4011c4:	f012 0f01 	tst.w	r2, #1
  4011c8:	d10d      	bne.n	4011e6 <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4011ca:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4011cc:	f012 0f0a 	tst.w	r2, #10
  4011d0:	d00b      	beq.n	4011ea <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4011d2:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4011d4:	f012 0f02 	tst.w	r2, #2
  4011d8:	d109      	bne.n	4011ee <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4011da:	f012 0f08 	tst.w	r2, #8
  4011de:	d008      	beq.n	4011f2 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4011e0:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4011e4:	e005      	b.n	4011f2 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4011e6:	6641      	str	r1, [r0, #100]	; 0x64
  4011e8:	e7f0      	b.n	4011cc <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4011ea:	6241      	str	r1, [r0, #36]	; 0x24
  4011ec:	e7f2      	b.n	4011d4 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4011ee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4011f2:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4011f4:	6001      	str	r1, [r0, #0]
  4011f6:	4770      	bx	lr

004011f8 <pio_set_output>:
{
  4011f8:	b410      	push	{r4}
  4011fa:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4011fc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4011fe:	b94c      	cbnz	r4, 401214 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401200:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401202:	b14b      	cbz	r3, 401218 <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401204:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  401206:	b94a      	cbnz	r2, 40121c <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  401208:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40120a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  40120c:	6001      	str	r1, [r0, #0]
}
  40120e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401212:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401214:	6641      	str	r1, [r0, #100]	; 0x64
  401216:	e7f4      	b.n	401202 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  401218:	6541      	str	r1, [r0, #84]	; 0x54
  40121a:	e7f4      	b.n	401206 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  40121c:	6301      	str	r1, [r0, #48]	; 0x30
  40121e:	e7f4      	b.n	40120a <pio_set_output+0x12>

00401220 <pio_configure>:
{
  401220:	b570      	push	{r4, r5, r6, lr}
  401222:	b082      	sub	sp, #8
  401224:	4605      	mov	r5, r0
  401226:	4616      	mov	r6, r2
  401228:	461c      	mov	r4, r3
	switch (ul_type) {
  40122a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  40122e:	d014      	beq.n	40125a <pio_configure+0x3a>
  401230:	d90a      	bls.n	401248 <pio_configure+0x28>
  401232:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401236:	d024      	beq.n	401282 <pio_configure+0x62>
  401238:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40123c:	d021      	beq.n	401282 <pio_configure+0x62>
  40123e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401242:	d017      	beq.n	401274 <pio_configure+0x54>
		return 0;
  401244:	2000      	movs	r0, #0
  401246:	e01a      	b.n	40127e <pio_configure+0x5e>
	switch (ul_type) {
  401248:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  40124c:	d005      	beq.n	40125a <pio_configure+0x3a>
  40124e:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401252:	d002      	beq.n	40125a <pio_configure+0x3a>
  401254:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401258:	d1f4      	bne.n	401244 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40125a:	4632      	mov	r2, r6
  40125c:	4628      	mov	r0, r5
  40125e:	4b11      	ldr	r3, [pc, #68]	; (4012a4 <pio_configure+0x84>)
  401260:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401262:	f014 0f01 	tst.w	r4, #1
  401266:	d102      	bne.n	40126e <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  401268:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40126a:	2001      	movs	r0, #1
  40126c:	e007      	b.n	40127e <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  40126e:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401270:	2001      	movs	r0, #1
  401272:	e004      	b.n	40127e <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401274:	461a      	mov	r2, r3
  401276:	4631      	mov	r1, r6
  401278:	4b0b      	ldr	r3, [pc, #44]	; (4012a8 <pio_configure+0x88>)
  40127a:	4798      	blx	r3
	return 1;
  40127c:	2001      	movs	r0, #1
}
  40127e:	b002      	add	sp, #8
  401280:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401282:	f004 0301 	and.w	r3, r4, #1
  401286:	9300      	str	r3, [sp, #0]
  401288:	f3c4 0380 	ubfx	r3, r4, #2, #1
  40128c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401290:	bf14      	ite	ne
  401292:	2200      	movne	r2, #0
  401294:	2201      	moveq	r2, #1
  401296:	4631      	mov	r1, r6
  401298:	4628      	mov	r0, r5
  40129a:	4c04      	ldr	r4, [pc, #16]	; (4012ac <pio_configure+0x8c>)
  40129c:	47a0      	blx	r4
	return 1;
  40129e:	2001      	movs	r0, #1
		break;
  4012a0:	e7ed      	b.n	40127e <pio_configure+0x5e>
  4012a2:	bf00      	nop
  4012a4:	00401131 	.word	0x00401131
  4012a8:	004011c3 	.word	0x004011c3
  4012ac:	004011f9 	.word	0x004011f9

004012b0 <pio_get_output_data_status>:
	if ((p_pio->PIO_ODSR & ul_mask) == 0) {
  4012b0:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4012b2:	420b      	tst	r3, r1
}
  4012b4:	bf14      	ite	ne
  4012b6:	2001      	movne	r0, #1
  4012b8:	2000      	moveq	r0, #0
  4012ba:	4770      	bx	lr

004012bc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4012bc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4012be:	4770      	bx	lr

004012c0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4012c0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4012c2:	4770      	bx	lr

004012c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4012c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4012c8:	4604      	mov	r4, r0
  4012ca:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4012cc:	4b0e      	ldr	r3, [pc, #56]	; (401308 <pio_handler_process+0x44>)
  4012ce:	4798      	blx	r3
  4012d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4012d2:	4620      	mov	r0, r4
  4012d4:	4b0d      	ldr	r3, [pc, #52]	; (40130c <pio_handler_process+0x48>)
  4012d6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4012d8:	4005      	ands	r5, r0
  4012da:	d013      	beq.n	401304 <pio_handler_process+0x40>
  4012dc:	4c0c      	ldr	r4, [pc, #48]	; (401310 <pio_handler_process+0x4c>)
  4012de:	f104 0660 	add.w	r6, r4, #96	; 0x60
  4012e2:	e003      	b.n	4012ec <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  4012e4:	42b4      	cmp	r4, r6
  4012e6:	d00d      	beq.n	401304 <pio_handler_process+0x40>
  4012e8:	3410      	adds	r4, #16
		while (status != 0) {
  4012ea:	b15d      	cbz	r5, 401304 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  4012ec:	6820      	ldr	r0, [r4, #0]
  4012ee:	4540      	cmp	r0, r8
  4012f0:	d1f8      	bne.n	4012e4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  4012f2:	6861      	ldr	r1, [r4, #4]
  4012f4:	4229      	tst	r1, r5
  4012f6:	d0f5      	beq.n	4012e4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  4012f8:	68e3      	ldr	r3, [r4, #12]
  4012fa:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  4012fc:	6863      	ldr	r3, [r4, #4]
  4012fe:	ea25 0503 	bic.w	r5, r5, r3
  401302:	e7ef      	b.n	4012e4 <pio_handler_process+0x20>
  401304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401308:	004012bd 	.word	0x004012bd
  40130c:	004012c1 	.word	0x004012c1
  401310:	20400670 	.word	0x20400670

00401314 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401314:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401316:	210a      	movs	r1, #10
  401318:	4801      	ldr	r0, [pc, #4]	; (401320 <PIOA_Handler+0xc>)
  40131a:	4b02      	ldr	r3, [pc, #8]	; (401324 <PIOA_Handler+0x10>)
  40131c:	4798      	blx	r3
  40131e:	bd08      	pop	{r3, pc}
  401320:	400e0e00 	.word	0x400e0e00
  401324:	004012c5 	.word	0x004012c5

00401328 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401328:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40132a:	210b      	movs	r1, #11
  40132c:	4801      	ldr	r0, [pc, #4]	; (401334 <PIOB_Handler+0xc>)
  40132e:	4b02      	ldr	r3, [pc, #8]	; (401338 <PIOB_Handler+0x10>)
  401330:	4798      	blx	r3
  401332:	bd08      	pop	{r3, pc}
  401334:	400e1000 	.word	0x400e1000
  401338:	004012c5 	.word	0x004012c5

0040133c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  40133c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  40133e:	210c      	movs	r1, #12
  401340:	4801      	ldr	r0, [pc, #4]	; (401348 <PIOC_Handler+0xc>)
  401342:	4b02      	ldr	r3, [pc, #8]	; (40134c <PIOC_Handler+0x10>)
  401344:	4798      	blx	r3
  401346:	bd08      	pop	{r3, pc}
  401348:	400e1200 	.word	0x400e1200
  40134c:	004012c5 	.word	0x004012c5

00401350 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  401350:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  401352:	2110      	movs	r1, #16
  401354:	4801      	ldr	r0, [pc, #4]	; (40135c <PIOD_Handler+0xc>)
  401356:	4b02      	ldr	r3, [pc, #8]	; (401360 <PIOD_Handler+0x10>)
  401358:	4798      	blx	r3
  40135a:	bd08      	pop	{r3, pc}
  40135c:	400e1400 	.word	0x400e1400
  401360:	004012c5 	.word	0x004012c5

00401364 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  401364:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  401366:	2111      	movs	r1, #17
  401368:	4801      	ldr	r0, [pc, #4]	; (401370 <PIOE_Handler+0xc>)
  40136a:	4b02      	ldr	r3, [pc, #8]	; (401374 <PIOE_Handler+0x10>)
  40136c:	4798      	blx	r3
  40136e:	bd08      	pop	{r3, pc}
  401370:	400e1600 	.word	0x400e1600
  401374:	004012c5 	.word	0x004012c5

00401378 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  401378:	2803      	cmp	r0, #3
  40137a:	d011      	beq.n	4013a0 <pmc_mck_set_division+0x28>
  40137c:	2804      	cmp	r0, #4
  40137e:	d012      	beq.n	4013a6 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  401380:	2802      	cmp	r0, #2
  401382:	bf0c      	ite	eq
  401384:	f44f 7180 	moveq.w	r1, #256	; 0x100
  401388:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40138a:	4a08      	ldr	r2, [pc, #32]	; (4013ac <pmc_mck_set_division+0x34>)
  40138c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40138e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401392:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401394:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401396:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401398:	f013 0f08 	tst.w	r3, #8
  40139c:	d0fb      	beq.n	401396 <pmc_mck_set_division+0x1e>
}
  40139e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  4013a0:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  4013a4:	e7f1      	b.n	40138a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  4013a6:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  4013aa:	e7ee      	b.n	40138a <pmc_mck_set_division+0x12>
  4013ac:	400e0600 	.word	0x400e0600

004013b0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  4013b0:	4a17      	ldr	r2, [pc, #92]	; (401410 <pmc_switch_mck_to_pllack+0x60>)
  4013b2:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  4013b8:	4318      	orrs	r0, r3
  4013ba:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013be:	f013 0f08 	tst.w	r3, #8
  4013c2:	d10a      	bne.n	4013da <pmc_switch_mck_to_pllack+0x2a>
  4013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013c8:	4911      	ldr	r1, [pc, #68]	; (401410 <pmc_switch_mck_to_pllack+0x60>)
  4013ca:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013cc:	f012 0f08 	tst.w	r2, #8
  4013d0:	d103      	bne.n	4013da <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013d2:	3b01      	subs	r3, #1
  4013d4:	d1f9      	bne.n	4013ca <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  4013d6:	2001      	movs	r0, #1
  4013d8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  4013da:	4a0d      	ldr	r2, [pc, #52]	; (401410 <pmc_switch_mck_to_pllack+0x60>)
  4013dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4013de:	f023 0303 	bic.w	r3, r3, #3
  4013e2:	f043 0302 	orr.w	r3, r3, #2
  4013e6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  4013e8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4013ea:	f013 0f08 	tst.w	r3, #8
  4013ee:	d10a      	bne.n	401406 <pmc_switch_mck_to_pllack+0x56>
  4013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  4013f4:	4906      	ldr	r1, [pc, #24]	; (401410 <pmc_switch_mck_to_pllack+0x60>)
  4013f6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  4013f8:	f012 0f08 	tst.w	r2, #8
  4013fc:	d105      	bne.n	40140a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  4013fe:	3b01      	subs	r3, #1
  401400:	d1f9      	bne.n	4013f6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401402:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401404:	4770      	bx	lr
	return 0;
  401406:	2000      	movs	r0, #0
  401408:	4770      	bx	lr
  40140a:	2000      	movs	r0, #0
  40140c:	4770      	bx	lr
  40140e:	bf00      	nop
  401410:	400e0600 	.word	0x400e0600

00401414 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401414:	b9a0      	cbnz	r0, 401440 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401416:	480e      	ldr	r0, [pc, #56]	; (401450 <pmc_switch_mainck_to_xtal+0x3c>)
  401418:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40141a:	0209      	lsls	r1, r1, #8
  40141c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40141e:	4a0d      	ldr	r2, [pc, #52]	; (401454 <pmc_switch_mainck_to_xtal+0x40>)
  401420:	401a      	ands	r2, r3
  401422:	4b0d      	ldr	r3, [pc, #52]	; (401458 <pmc_switch_mainck_to_xtal+0x44>)
  401424:	4313      	orrs	r3, r2
  401426:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401428:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40142a:	4602      	mov	r2, r0
  40142c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40142e:	f013 0f01 	tst.w	r3, #1
  401432:	d0fb      	beq.n	40142c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  401434:	4a06      	ldr	r2, [pc, #24]	; (401450 <pmc_switch_mainck_to_xtal+0x3c>)
  401436:	6a11      	ldr	r1, [r2, #32]
  401438:	4b08      	ldr	r3, [pc, #32]	; (40145c <pmc_switch_mainck_to_xtal+0x48>)
  40143a:	430b      	orrs	r3, r1
  40143c:	6213      	str	r3, [r2, #32]
  40143e:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  401440:	4903      	ldr	r1, [pc, #12]	; (401450 <pmc_switch_mainck_to_xtal+0x3c>)
  401442:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  401444:	4a06      	ldr	r2, [pc, #24]	; (401460 <pmc_switch_mainck_to_xtal+0x4c>)
  401446:	401a      	ands	r2, r3
  401448:	4b06      	ldr	r3, [pc, #24]	; (401464 <pmc_switch_mainck_to_xtal+0x50>)
  40144a:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40144c:	620b      	str	r3, [r1, #32]
  40144e:	4770      	bx	lr
  401450:	400e0600 	.word	0x400e0600
  401454:	ffc8fffc 	.word	0xffc8fffc
  401458:	00370001 	.word	0x00370001
  40145c:	01370000 	.word	0x01370000
  401460:	fec8fffc 	.word	0xfec8fffc
  401464:	01370002 	.word	0x01370002

00401468 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  401468:	4b02      	ldr	r3, [pc, #8]	; (401474 <pmc_osc_is_ready_mainck+0xc>)
  40146a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40146c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  401470:	4770      	bx	lr
  401472:	bf00      	nop
  401474:	400e0600 	.word	0x400e0600

00401478 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  401478:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40147c:	4b01      	ldr	r3, [pc, #4]	; (401484 <pmc_disable_pllack+0xc>)
  40147e:	629a      	str	r2, [r3, #40]	; 0x28
  401480:	4770      	bx	lr
  401482:	bf00      	nop
  401484:	400e0600 	.word	0x400e0600

00401488 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  401488:	4b02      	ldr	r3, [pc, #8]	; (401494 <pmc_is_locked_pllack+0xc>)
  40148a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40148c:	f000 0002 	and.w	r0, r0, #2
  401490:	4770      	bx	lr
  401492:	bf00      	nop
  401494:	400e0600 	.word	0x400e0600

00401498 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  401498:	283f      	cmp	r0, #63	; 0x3f
  40149a:	d81e      	bhi.n	4014da <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40149c:	281f      	cmp	r0, #31
  40149e:	d80c      	bhi.n	4014ba <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  4014a0:	4b11      	ldr	r3, [pc, #68]	; (4014e8 <pmc_enable_periph_clk+0x50>)
  4014a2:	699a      	ldr	r2, [r3, #24]
  4014a4:	2301      	movs	r3, #1
  4014a6:	4083      	lsls	r3, r0
  4014a8:	4393      	bics	r3, r2
  4014aa:	d018      	beq.n	4014de <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  4014ac:	2301      	movs	r3, #1
  4014ae:	fa03 f000 	lsl.w	r0, r3, r0
  4014b2:	4b0d      	ldr	r3, [pc, #52]	; (4014e8 <pmc_enable_periph_clk+0x50>)
  4014b4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  4014b6:	2000      	movs	r0, #0
  4014b8:	4770      	bx	lr
		ul_id -= 32;
  4014ba:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  4014bc:	4b0a      	ldr	r3, [pc, #40]	; (4014e8 <pmc_enable_periph_clk+0x50>)
  4014be:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  4014c2:	2301      	movs	r3, #1
  4014c4:	4083      	lsls	r3, r0
  4014c6:	4393      	bics	r3, r2
  4014c8:	d00b      	beq.n	4014e2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  4014ca:	2301      	movs	r3, #1
  4014cc:	fa03 f000 	lsl.w	r0, r3, r0
  4014d0:	4b05      	ldr	r3, [pc, #20]	; (4014e8 <pmc_enable_periph_clk+0x50>)
  4014d2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  4014d6:	2000      	movs	r0, #0
  4014d8:	4770      	bx	lr
		return 1;
  4014da:	2001      	movs	r0, #1
  4014dc:	4770      	bx	lr
	return 0;
  4014de:	2000      	movs	r0, #0
  4014e0:	4770      	bx	lr
  4014e2:	2000      	movs	r0, #0
}
  4014e4:	4770      	bx	lr
  4014e6:	bf00      	nop
  4014e8:	400e0600 	.word	0x400e0600

004014ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  4014ec:	e7fe      	b.n	4014ec <Dummy_Handler>
	...

004014f0 <Reset_Handler>:
{
  4014f0:	b500      	push	{lr}
  4014f2:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  4014f4:	4b25      	ldr	r3, [pc, #148]	; (40158c <Reset_Handler+0x9c>)
  4014f6:	4a26      	ldr	r2, [pc, #152]	; (401590 <Reset_Handler+0xa0>)
  4014f8:	429a      	cmp	r2, r3
  4014fa:	d010      	beq.n	40151e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  4014fc:	4b25      	ldr	r3, [pc, #148]	; (401594 <Reset_Handler+0xa4>)
  4014fe:	4a23      	ldr	r2, [pc, #140]	; (40158c <Reset_Handler+0x9c>)
  401500:	429a      	cmp	r2, r3
  401502:	d20c      	bcs.n	40151e <Reset_Handler+0x2e>
  401504:	3b01      	subs	r3, #1
  401506:	1a9b      	subs	r3, r3, r2
  401508:	f023 0303 	bic.w	r3, r3, #3
  40150c:	3304      	adds	r3, #4
  40150e:	4413      	add	r3, r2
  401510:	491f      	ldr	r1, [pc, #124]	; (401590 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401512:	f851 0b04 	ldr.w	r0, [r1], #4
  401516:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40151a:	429a      	cmp	r2, r3
  40151c:	d1f9      	bne.n	401512 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40151e:	4b1e      	ldr	r3, [pc, #120]	; (401598 <Reset_Handler+0xa8>)
  401520:	4a1e      	ldr	r2, [pc, #120]	; (40159c <Reset_Handler+0xac>)
  401522:	429a      	cmp	r2, r3
  401524:	d20a      	bcs.n	40153c <Reset_Handler+0x4c>
  401526:	3b01      	subs	r3, #1
  401528:	1a9b      	subs	r3, r3, r2
  40152a:	f023 0303 	bic.w	r3, r3, #3
  40152e:	3304      	adds	r3, #4
  401530:	4413      	add	r3, r2
                *pDest++ = 0;
  401532:	2100      	movs	r1, #0
  401534:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401538:	4293      	cmp	r3, r2
  40153a:	d1fb      	bne.n	401534 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40153c:	4a18      	ldr	r2, [pc, #96]	; (4015a0 <Reset_Handler+0xb0>)
  40153e:	4b19      	ldr	r3, [pc, #100]	; (4015a4 <Reset_Handler+0xb4>)
  401540:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401544:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401546:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40154a:	fab3 f383 	clz	r3, r3
  40154e:	095b      	lsrs	r3, r3, #5
  401550:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401552:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401554:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401558:	2200      	movs	r2, #0
  40155a:	4b13      	ldr	r3, [pc, #76]	; (4015a8 <Reset_Handler+0xb8>)
  40155c:	701a      	strb	r2, [r3, #0]
	return flags;
  40155e:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401560:	4a12      	ldr	r2, [pc, #72]	; (4015ac <Reset_Handler+0xbc>)
  401562:	6813      	ldr	r3, [r2, #0]
  401564:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401568:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  40156a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40156e:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401572:	b129      	cbz	r1, 401580 <Reset_Handler+0x90>
		cpu_irq_enable();
  401574:	2201      	movs	r2, #1
  401576:	4b0c      	ldr	r3, [pc, #48]	; (4015a8 <Reset_Handler+0xb8>)
  401578:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  40157a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  40157e:	b662      	cpsie	i
        __libc_init_array();
  401580:	4b0b      	ldr	r3, [pc, #44]	; (4015b0 <Reset_Handler+0xc0>)
  401582:	4798      	blx	r3
        main();
  401584:	4b0b      	ldr	r3, [pc, #44]	; (4015b4 <Reset_Handler+0xc4>)
  401586:	4798      	blx	r3
  401588:	e7fe      	b.n	401588 <Reset_Handler+0x98>
  40158a:	bf00      	nop
  40158c:	20400000 	.word	0x20400000
  401590:	00402c1c 	.word	0x00402c1c
  401594:	2040044c 	.word	0x2040044c
  401598:	20400708 	.word	0x20400708
  40159c:	2040044c 	.word	0x2040044c
  4015a0:	e000ed00 	.word	0xe000ed00
  4015a4:	00400000 	.word	0x00400000
  4015a8:	20400018 	.word	0x20400018
  4015ac:	e000ed88 	.word	0xe000ed88
  4015b0:	00402011 	.word	0x00402011
  4015b4:	00401b6d 	.word	0x00401b6d

004015b8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  4015b8:	4b3b      	ldr	r3, [pc, #236]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  4015ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015bc:	f003 0303 	and.w	r3, r3, #3
  4015c0:	2b01      	cmp	r3, #1
  4015c2:	d01d      	beq.n	401600 <SystemCoreClockUpdate+0x48>
  4015c4:	b183      	cbz	r3, 4015e8 <SystemCoreClockUpdate+0x30>
  4015c6:	2b02      	cmp	r3, #2
  4015c8:	d036      	beq.n	401638 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  4015ca:	4b37      	ldr	r3, [pc, #220]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  4015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  4015ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4015d2:	2b70      	cmp	r3, #112	; 0x70
  4015d4:	d05f      	beq.n	401696 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  4015d6:	4b34      	ldr	r3, [pc, #208]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  4015d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  4015da:	4934      	ldr	r1, [pc, #208]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  4015dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
  4015e0:	680b      	ldr	r3, [r1, #0]
  4015e2:	40d3      	lsrs	r3, r2
  4015e4:	600b      	str	r3, [r1, #0]
  4015e6:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  4015e8:	4b31      	ldr	r3, [pc, #196]	; (4016b0 <SystemCoreClockUpdate+0xf8>)
  4015ea:	695b      	ldr	r3, [r3, #20]
  4015ec:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  4015f0:	bf14      	ite	ne
  4015f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  4015f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  4015fa:	4b2c      	ldr	r3, [pc, #176]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  4015fc:	601a      	str	r2, [r3, #0]
  4015fe:	e7e4      	b.n	4015ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401600:	4b29      	ldr	r3, [pc, #164]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  401602:	6a1b      	ldr	r3, [r3, #32]
  401604:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401608:	d003      	beq.n	401612 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40160a:	4a2a      	ldr	r2, [pc, #168]	; (4016b4 <SystemCoreClockUpdate+0xfc>)
  40160c:	4b27      	ldr	r3, [pc, #156]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  40160e:	601a      	str	r2, [r3, #0]
  401610:	e7db      	b.n	4015ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401612:	4a29      	ldr	r2, [pc, #164]	; (4016b8 <SystemCoreClockUpdate+0x100>)
  401614:	4b25      	ldr	r3, [pc, #148]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401616:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401618:	4b23      	ldr	r3, [pc, #140]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  40161a:	6a1b      	ldr	r3, [r3, #32]
  40161c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401620:	2b10      	cmp	r3, #16
  401622:	d005      	beq.n	401630 <SystemCoreClockUpdate+0x78>
  401624:	2b20      	cmp	r3, #32
  401626:	d1d0      	bne.n	4015ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401628:	4a22      	ldr	r2, [pc, #136]	; (4016b4 <SystemCoreClockUpdate+0xfc>)
  40162a:	4b20      	ldr	r3, [pc, #128]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  40162c:	601a      	str	r2, [r3, #0]
          break;
  40162e:	e7cc      	b.n	4015ca <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401630:	4a22      	ldr	r2, [pc, #136]	; (4016bc <SystemCoreClockUpdate+0x104>)
  401632:	4b1e      	ldr	r3, [pc, #120]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401634:	601a      	str	r2, [r3, #0]
          break;
  401636:	e7c8      	b.n	4015ca <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401638:	4b1b      	ldr	r3, [pc, #108]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  40163a:	6a1b      	ldr	r3, [r3, #32]
  40163c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401640:	d016      	beq.n	401670 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401642:	4a1c      	ldr	r2, [pc, #112]	; (4016b4 <SystemCoreClockUpdate+0xfc>)
  401644:	4b19      	ldr	r3, [pc, #100]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401646:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401648:	4b17      	ldr	r3, [pc, #92]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  40164a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40164c:	f003 0303 	and.w	r3, r3, #3
  401650:	2b02      	cmp	r3, #2
  401652:	d1ba      	bne.n	4015ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401654:	4a14      	ldr	r2, [pc, #80]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  401656:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401658:	6a92      	ldr	r2, [r2, #40]	; 0x28
  40165a:	4814      	ldr	r0, [pc, #80]	; (4016ac <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  40165c:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401660:	6803      	ldr	r3, [r0, #0]
  401662:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401666:	b2d2      	uxtb	r2, r2
  401668:	fbb3 f3f2 	udiv	r3, r3, r2
  40166c:	6003      	str	r3, [r0, #0]
  40166e:	e7ac      	b.n	4015ca <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401670:	4a11      	ldr	r2, [pc, #68]	; (4016b8 <SystemCoreClockUpdate+0x100>)
  401672:	4b0e      	ldr	r3, [pc, #56]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401674:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401676:	4b0c      	ldr	r3, [pc, #48]	; (4016a8 <SystemCoreClockUpdate+0xf0>)
  401678:	6a1b      	ldr	r3, [r3, #32]
  40167a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  40167e:	2b10      	cmp	r3, #16
  401680:	d005      	beq.n	40168e <SystemCoreClockUpdate+0xd6>
  401682:	2b20      	cmp	r3, #32
  401684:	d1e0      	bne.n	401648 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401686:	4a0b      	ldr	r2, [pc, #44]	; (4016b4 <SystemCoreClockUpdate+0xfc>)
  401688:	4b08      	ldr	r3, [pc, #32]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  40168a:	601a      	str	r2, [r3, #0]
          break;
  40168c:	e7dc      	b.n	401648 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  40168e:	4a0b      	ldr	r2, [pc, #44]	; (4016bc <SystemCoreClockUpdate+0x104>)
  401690:	4b06      	ldr	r3, [pc, #24]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401692:	601a      	str	r2, [r3, #0]
          break;
  401694:	e7d8      	b.n	401648 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401696:	4a05      	ldr	r2, [pc, #20]	; (4016ac <SystemCoreClockUpdate+0xf4>)
  401698:	6813      	ldr	r3, [r2, #0]
  40169a:	4909      	ldr	r1, [pc, #36]	; (4016c0 <SystemCoreClockUpdate+0x108>)
  40169c:	fba1 1303 	umull	r1, r3, r1, r3
  4016a0:	085b      	lsrs	r3, r3, #1
  4016a2:	6013      	str	r3, [r2, #0]
  4016a4:	4770      	bx	lr
  4016a6:	bf00      	nop
  4016a8:	400e0600 	.word	0x400e0600
  4016ac:	2040001c 	.word	0x2040001c
  4016b0:	400e1810 	.word	0x400e1810
  4016b4:	00b71b00 	.word	0x00b71b00
  4016b8:	003d0900 	.word	0x003d0900
  4016bc:	007a1200 	.word	0x007a1200
  4016c0:	aaaaaaab 	.word	0xaaaaaaab

004016c4 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  4016c4:	4b16      	ldr	r3, [pc, #88]	; (401720 <system_init_flash+0x5c>)
  4016c6:	4298      	cmp	r0, r3
  4016c8:	d913      	bls.n	4016f2 <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  4016ca:	4b16      	ldr	r3, [pc, #88]	; (401724 <system_init_flash+0x60>)
  4016cc:	4298      	cmp	r0, r3
  4016ce:	d915      	bls.n	4016fc <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  4016d0:	4b15      	ldr	r3, [pc, #84]	; (401728 <system_init_flash+0x64>)
  4016d2:	4298      	cmp	r0, r3
  4016d4:	d916      	bls.n	401704 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  4016d6:	4b15      	ldr	r3, [pc, #84]	; (40172c <system_init_flash+0x68>)
  4016d8:	4298      	cmp	r0, r3
  4016da:	d917      	bls.n	40170c <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  4016dc:	4b14      	ldr	r3, [pc, #80]	; (401730 <system_init_flash+0x6c>)
  4016de:	4298      	cmp	r0, r3
  4016e0:	d918      	bls.n	401714 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  4016e2:	4b14      	ldr	r3, [pc, #80]	; (401734 <system_init_flash+0x70>)
  4016e4:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  4016e6:	bf94      	ite	ls
  4016e8:	4a13      	ldrls	r2, [pc, #76]	; (401738 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  4016ea:	4a14      	ldrhi	r2, [pc, #80]	; (40173c <system_init_flash+0x78>)
  4016ec:	4b14      	ldr	r3, [pc, #80]	; (401740 <system_init_flash+0x7c>)
  4016ee:	601a      	str	r2, [r3, #0]
  4016f0:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  4016f2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  4016f6:	4b12      	ldr	r3, [pc, #72]	; (401740 <system_init_flash+0x7c>)
  4016f8:	601a      	str	r2, [r3, #0]
  4016fa:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  4016fc:	4a11      	ldr	r2, [pc, #68]	; (401744 <system_init_flash+0x80>)
  4016fe:	4b10      	ldr	r3, [pc, #64]	; (401740 <system_init_flash+0x7c>)
  401700:	601a      	str	r2, [r3, #0]
  401702:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401704:	4a10      	ldr	r2, [pc, #64]	; (401748 <system_init_flash+0x84>)
  401706:	4b0e      	ldr	r3, [pc, #56]	; (401740 <system_init_flash+0x7c>)
  401708:	601a      	str	r2, [r3, #0]
  40170a:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  40170c:	4a0f      	ldr	r2, [pc, #60]	; (40174c <system_init_flash+0x88>)
  40170e:	4b0c      	ldr	r3, [pc, #48]	; (401740 <system_init_flash+0x7c>)
  401710:	601a      	str	r2, [r3, #0]
  401712:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401714:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401718:	4b09      	ldr	r3, [pc, #36]	; (401740 <system_init_flash+0x7c>)
  40171a:	601a      	str	r2, [r3, #0]
  40171c:	4770      	bx	lr
  40171e:	bf00      	nop
  401720:	015ef3bf 	.word	0x015ef3bf
  401724:	02bde77f 	.word	0x02bde77f
  401728:	041cdb3f 	.word	0x041cdb3f
  40172c:	057bceff 	.word	0x057bceff
  401730:	06dac2bf 	.word	0x06dac2bf
  401734:	0839b67f 	.word	0x0839b67f
  401738:	04000500 	.word	0x04000500
  40173c:	04000600 	.word	0x04000600
  401740:	400e0c00 	.word	0x400e0c00
  401744:	04000100 	.word	0x04000100
  401748:	04000200 	.word	0x04000200
  40174c:	04000300 	.word	0x04000300

00401750 <RTT_init>:

static float get_time_rtt(){
	uint ul_previous_time = rtt_read_timer_value(RTT);
}

static void RTT_init(float freqPrescale, uint32_t IrqNPulses, uint32_t rttIRQSource) {
  401750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401754:	ed2d 8b02 	vpush	{d8}
  401758:	b082      	sub	sp, #8
  40175a:	eeb0 8a40 	vmov.f32	s16, s0
  40175e:	4680      	mov	r8, r0
  401760:	460f      	mov	r7, r1

	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
	
	rtt_sel_source(RTT, false);
  401762:	4c20      	ldr	r4, [pc, #128]	; (4017e4 <RTT_init+0x94>)
  401764:	2100      	movs	r1, #0
  401766:	4620      	mov	r0, r4
  401768:	4b1f      	ldr	r3, [pc, #124]	; (4017e8 <RTT_init+0x98>)
  40176a:	4798      	blx	r3
	uint16_t pllPreScale = (int) (((float) 32768) / freqPrescale);
  40176c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 4017ec <RTT_init+0x9c>
  401770:	eec7 7a08 	vdiv.f32	s15, s14, s16
  401774:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  401778:	edcd 7a01 	vstr	s15, [sp, #4]
	rtt_init(RTT, pllPreScale);
  40177c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
  401780:	4620      	mov	r0, r4
  401782:	4b1b      	ldr	r3, [pc, #108]	; (4017f0 <RTT_init+0xa0>)
  401784:	4798      	blx	r3
	
	if (rttIRQSource & RTT_MR_ALMIEN) {
  401786:	f417 3f80 	tst.w	r7, #65536	; 0x10000
  40178a:	d116      	bne.n	4017ba <RTT_init+0x6a>
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  40178c:	4b19      	ldr	r3, [pc, #100]	; (4017f4 <RTT_init+0xa4>)
  40178e:	2208      	movs	r2, #8
  401790:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401794:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401798:	2180      	movs	r1, #128	; 0x80
  40179a:	f883 1303 	strb.w	r1, [r3, #771]	; 0x303
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  40179e:	601a      	str	r2, [r3, #0]
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 4);
	NVIC_EnableIRQ(RTT_IRQn);

	/* Enable RTT interrupt */
	if (rttIRQSource & (RTT_MR_RTTINCIEN | RTT_MR_ALMIEN))
  4017a0:	f417 3f40 	tst.w	r7, #196608	; 0x30000
  4017a4:	d119      	bne.n	4017da <RTT_init+0x8a>
	rtt_enable_interrupt(RTT, rttIRQSource);
	else
	rtt_disable_interrupt(RTT, RTT_MR_RTTINCIEN | RTT_MR_ALMIEN);
  4017a6:	f44f 3140 	mov.w	r1, #196608	; 0x30000
  4017aa:	480e      	ldr	r0, [pc, #56]	; (4017e4 <RTT_init+0x94>)
  4017ac:	4b12      	ldr	r3, [pc, #72]	; (4017f8 <RTT_init+0xa8>)
  4017ae:	4798      	blx	r3
	
}
  4017b0:	b002      	add	sp, #8
  4017b2:	ecbd 8b02 	vpop	{d8}
  4017b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_previous_time = rtt_read_timer_value(RTT);
  4017ba:	4620      	mov	r0, r4
  4017bc:	4b0f      	ldr	r3, [pc, #60]	; (4017fc <RTT_init+0xac>)
  4017be:	4798      	blx	r3
  4017c0:	4604      	mov	r4, r0
		while (ul_previous_time == rtt_read_timer_value(RTT));
  4017c2:	4e08      	ldr	r6, [pc, #32]	; (4017e4 <RTT_init+0x94>)
  4017c4:	4d0d      	ldr	r5, [pc, #52]	; (4017fc <RTT_init+0xac>)
  4017c6:	4630      	mov	r0, r6
  4017c8:	47a8      	blx	r5
  4017ca:	4284      	cmp	r4, r0
  4017cc:	d0fb      	beq.n	4017c6 <RTT_init+0x76>
		rtt_write_alarm_time(RTT, IrqNPulses+ul_previous_time);
  4017ce:	eb04 0108 	add.w	r1, r4, r8
  4017d2:	4804      	ldr	r0, [pc, #16]	; (4017e4 <RTT_init+0x94>)
  4017d4:	4b0a      	ldr	r3, [pc, #40]	; (401800 <RTT_init+0xb0>)
  4017d6:	4798      	blx	r3
  4017d8:	e7d8      	b.n	40178c <RTT_init+0x3c>
	rtt_enable_interrupt(RTT, rttIRQSource);
  4017da:	4639      	mov	r1, r7
  4017dc:	4801      	ldr	r0, [pc, #4]	; (4017e4 <RTT_init+0x94>)
  4017de:	4b09      	ldr	r3, [pc, #36]	; (401804 <RTT_init+0xb4>)
  4017e0:	4798      	blx	r3
  4017e2:	e7e5      	b.n	4017b0 <RTT_init+0x60>
  4017e4:	400e1830 	.word	0x400e1830
  4017e8:	004004ed 	.word	0x004004ed
  4017ec:	47000000 	.word	0x47000000
  4017f0:	004004d9 	.word	0x004004d9
  4017f4:	e000e100 	.word	0xe000e100
  4017f8:	0040052d 	.word	0x0040052d
  4017fc:	00400541 	.word	0x00400541
  401800:	00400559 	.word	0x00400559
  401804:	00400519 	.word	0x00400519

00401808 <RTC_Handler>:
void RTC_Handler(void) {
  401808:	b538      	push	{r3, r4, r5, lr}
	uint32_t ul_status = rtc_get_status(RTC);
  40180a:	480f      	ldr	r0, [pc, #60]	; (401848 <RTC_Handler+0x40>)
  40180c:	4b0f      	ldr	r3, [pc, #60]	; (40184c <RTC_Handler+0x44>)
  40180e:	4798      	blx	r3
	if ((ul_status & RTC_SR_ALARM) == RTC_SR_ALARM) {
  401810:	f010 0f02 	tst.w	r0, #2
  401814:	d002      	beq.n	40181c <RTC_Handler+0x14>
		flag_rtc_alarm = 1;
  401816:	2201      	movs	r2, #1
  401818:	4b0d      	ldr	r3, [pc, #52]	; (401850 <RTC_Handler+0x48>)
  40181a:	701a      	strb	r2, [r3, #0]
	rtc_clear_status(RTC, RTC_SCCR_SECCLR);
  40181c:	4d0a      	ldr	r5, [pc, #40]	; (401848 <RTC_Handler+0x40>)
  40181e:	2104      	movs	r1, #4
  401820:	4628      	mov	r0, r5
  401822:	4c0c      	ldr	r4, [pc, #48]	; (401854 <RTC_Handler+0x4c>)
  401824:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ALRCLR);
  401826:	2102      	movs	r1, #2
  401828:	4628      	mov	r0, r5
  40182a:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_ACKCLR);
  40182c:	2101      	movs	r1, #1
  40182e:	4628      	mov	r0, r5
  401830:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TIMCLR);
  401832:	2108      	movs	r1, #8
  401834:	4628      	mov	r0, r5
  401836:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_CALCLR);
  401838:	2110      	movs	r1, #16
  40183a:	4628      	mov	r0, r5
  40183c:	47a0      	blx	r4
	rtc_clear_status(RTC, RTC_SCCR_TDERRCLR);
  40183e:	2120      	movs	r1, #32
  401840:	4628      	mov	r0, r5
  401842:	47a0      	blx	r4
  401844:	bd38      	pop	{r3, r4, r5, pc}
  401846:	bf00      	nop
  401848:	400e1860 	.word	0x400e1860
  40184c:	004004d1 	.word	0x004004d1
  401850:	204006e0 	.word	0x204006e0
  401854:	004004d5 	.word	0x004004d5

00401858 <LED_init>:
void LED_init(int estado) {
  401858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40185c:	b082      	sub	sp, #8
  40185e:	4606      	mov	r6, r0
	pmc_enable_periph_clk(LED1_PIO_ID);
  401860:	200a      	movs	r0, #10
  401862:	4f14      	ldr	r7, [pc, #80]	; (4018b4 <LED_init+0x5c>)
  401864:	47b8      	blx	r7
	pio_set_output(LED1_PIO, LED1_IDX_MASK, estado, 0, 0);
  401866:	2400      	movs	r4, #0
  401868:	9400      	str	r4, [sp, #0]
  40186a:	4623      	mov	r3, r4
  40186c:	4632      	mov	r2, r6
  40186e:	2101      	movs	r1, #1
  401870:	4811      	ldr	r0, [pc, #68]	; (4018b8 <LED_init+0x60>)
  401872:	4d12      	ldr	r5, [pc, #72]	; (4018bc <LED_init+0x64>)
  401874:	47a8      	blx	r5
	pmc_enable_periph_clk(LED2_PIO_ID);
  401876:	200c      	movs	r0, #12
  401878:	47b8      	blx	r7
	pio_set_output(LED2_PIO, LED2_IDX_MASK, estado, 0, 0);
  40187a:	f8df 8048 	ldr.w	r8, [pc, #72]	; 4018c4 <LED_init+0x6c>
  40187e:	9400      	str	r4, [sp, #0]
  401880:	4623      	mov	r3, r4
  401882:	4632      	mov	r2, r6
  401884:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401888:	4640      	mov	r0, r8
  40188a:	47a8      	blx	r5
	pmc_enable_periph_clk(LED3_PIO_ID);
  40188c:	200b      	movs	r0, #11
  40188e:	47b8      	blx	r7
	pio_set_output(LED3_PIO, LED3_IDX_MASK, estado, 0, 0);
  401890:	9400      	str	r4, [sp, #0]
  401892:	4623      	mov	r3, r4
  401894:	4632      	mov	r2, r6
  401896:	2104      	movs	r1, #4
  401898:	4809      	ldr	r0, [pc, #36]	; (4018c0 <LED_init+0x68>)
  40189a:	47a8      	blx	r5
	pmc_enable_periph_clk(LED_PIO_ID);
  40189c:	200c      	movs	r0, #12
  40189e:	47b8      	blx	r7
	pio_set_output(LED_PIO, LED_IDX_MASK, estado, 0, 0);
  4018a0:	9400      	str	r4, [sp, #0]
  4018a2:	4623      	mov	r3, r4
  4018a4:	4632      	mov	r2, r6
  4018a6:	f44f 7180 	mov.w	r1, #256	; 0x100
  4018aa:	4640      	mov	r0, r8
  4018ac:	47a8      	blx	r5
};
  4018ae:	b002      	add	sp, #8
  4018b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4018b4:	00401499 	.word	0x00401499
  4018b8:	400e0e00 	.word	0x400e0e00
  4018bc:	004011f9 	.word	0x004011f9
  4018c0:	400e1000 	.word	0x400e1000
  4018c4:	400e1200 	.word	0x400e1200

004018c8 <pin_toggle>:
void pin_toggle(Pio *pio, uint32_t mask) {
  4018c8:	b538      	push	{r3, r4, r5, lr}
  4018ca:	4604      	mov	r4, r0
  4018cc:	460d      	mov	r5, r1
	if(pio_get_output_data_status(pio, mask))
  4018ce:	4b06      	ldr	r3, [pc, #24]	; (4018e8 <pin_toggle+0x20>)
  4018d0:	4798      	blx	r3
  4018d2:	b920      	cbnz	r0, 4018de <pin_toggle+0x16>
	pio_set(pio,mask);
  4018d4:	4629      	mov	r1, r5
  4018d6:	4620      	mov	r0, r4
  4018d8:	4b04      	ldr	r3, [pc, #16]	; (4018ec <pin_toggle+0x24>)
  4018da:	4798      	blx	r3
  4018dc:	bd38      	pop	{r3, r4, r5, pc}
	pio_clear(pio, mask);
  4018de:	4629      	mov	r1, r5
  4018e0:	4620      	mov	r0, r4
  4018e2:	4b03      	ldr	r3, [pc, #12]	; (4018f0 <pin_toggle+0x28>)
  4018e4:	4798      	blx	r3
  4018e6:	bd38      	pop	{r3, r4, r5, pc}
  4018e8:	004012b1 	.word	0x004012b1
  4018ec:	00401129 	.word	0x00401129
  4018f0:	0040112d 	.word	0x0040112d

004018f4 <TC1_Handler>:
void TC1_Handler(void) {
  4018f4:	b500      	push	{lr}
  4018f6:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  4018f8:	2101      	movs	r1, #1
  4018fa:	4805      	ldr	r0, [pc, #20]	; (401910 <TC1_Handler+0x1c>)
  4018fc:	4b05      	ldr	r3, [pc, #20]	; (401914 <TC1_Handler+0x20>)
  4018fe:	4798      	blx	r3
  401900:	9001      	str	r0, [sp, #4]
	pin_toggle(LED1_PIO, LED1_IDX_MASK);   
  401902:	2101      	movs	r1, #1
  401904:	4804      	ldr	r0, [pc, #16]	; (401918 <TC1_Handler+0x24>)
  401906:	4b05      	ldr	r3, [pc, #20]	; (40191c <TC1_Handler+0x28>)
  401908:	4798      	blx	r3
}
  40190a:	b003      	add	sp, #12
  40190c:	f85d fb04 	ldr.w	pc, [sp], #4
  401910:	4000c000 	.word	0x4000c000
  401914:	00400719 	.word	0x00400719
  401918:	400e0e00 	.word	0x400e0e00
  40191c:	004018c9 	.word	0x004018c9

00401920 <TC2_Handler>:
void TC2_Handler(void) {
  401920:	b500      	push	{lr}
  401922:	b083      	sub	sp, #12
	volatile uint32_t status = tc_get_status(TC0, 1);
  401924:	2101      	movs	r1, #1
  401926:	4806      	ldr	r0, [pc, #24]	; (401940 <TC2_Handler+0x20>)
  401928:	4b06      	ldr	r3, [pc, #24]	; (401944 <TC2_Handler+0x24>)
  40192a:	4798      	blx	r3
  40192c:	9001      	str	r0, [sp, #4]
	pin_toggle(LED_PIO, LED_IDX_MASK);   
  40192e:	f44f 7180 	mov.w	r1, #256	; 0x100
  401932:	4805      	ldr	r0, [pc, #20]	; (401948 <TC2_Handler+0x28>)
  401934:	4b05      	ldr	r3, [pc, #20]	; (40194c <TC2_Handler+0x2c>)
  401936:	4798      	blx	r3
}
  401938:	b003      	add	sp, #12
  40193a:	f85d fb04 	ldr.w	pc, [sp], #4
  40193e:	bf00      	nop
  401940:	4000c000 	.word	0x4000c000
  401944:	00400719 	.word	0x00400719
  401948:	400e1200 	.word	0x400e1200
  40194c:	004018c9 	.word	0x004018c9

00401950 <RTT_Handler>:
void RTT_Handler(void) {
  401950:	b510      	push	{r4, lr}
	ul_status = rtt_get_status(RTT);
  401952:	480c      	ldr	r0, [pc, #48]	; (401984 <RTT_Handler+0x34>)
  401954:	4b0c      	ldr	r3, [pc, #48]	; (401988 <RTT_Handler+0x38>)
  401956:	4798      	blx	r3
  401958:	4604      	mov	r4, r0
	if ((ul_status & RTT_SR_ALMS) == RTT_SR_ALMS) {
  40195a:	f010 0f01 	tst.w	r0, #1
  40195e:	d103      	bne.n	401968 <RTT_Handler+0x18>
	if ((ul_status & RTT_SR_RTTINC) == RTT_SR_RTTINC) {
  401960:	f014 0f02 	tst.w	r4, #2
  401964:	d108      	bne.n	401978 <RTT_Handler+0x28>
  401966:	bd10      	pop	{r4, pc}
		RTT_init(4, 0, RTT_MR_RTTINCIEN);
  401968:	f44f 3100 	mov.w	r1, #131072	; 0x20000
  40196c:	2000      	movs	r0, #0
  40196e:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
  401972:	4b06      	ldr	r3, [pc, #24]	; (40198c <RTT_Handler+0x3c>)
  401974:	4798      	blx	r3
  401976:	e7f3      	b.n	401960 <RTT_Handler+0x10>
		pin_toggle(LED2_PIO, LED2_IDX_MASK);    // BLINK Led
  401978:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40197c:	4804      	ldr	r0, [pc, #16]	; (401990 <RTT_Handler+0x40>)
  40197e:	4b05      	ldr	r3, [pc, #20]	; (401994 <RTT_Handler+0x44>)
  401980:	4798      	blx	r3
}
  401982:	e7f0      	b.n	401966 <RTT_Handler+0x16>
  401984:	400e1830 	.word	0x400e1830
  401988:	00400555 	.word	0x00400555
  40198c:	00401751 	.word	0x00401751
  401990:	400e1200 	.word	0x400e1200
  401994:	004018c9 	.word	0x004018c9

00401998 <TC_init>:
void TC_init(Tc * TC, int ID_TC, int TC_CHANNEL, int freq){
  401998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  40199c:	b085      	sub	sp, #20
  40199e:	4606      	mov	r6, r0
  4019a0:	460c      	mov	r4, r1
  4019a2:	4617      	mov	r7, r2
  4019a4:	4698      	mov	r8, r3
	pmc_enable_periph_clk(ID_TC);
  4019a6:	4608      	mov	r0, r1
  4019a8:	4b1c      	ldr	r3, [pc, #112]	; (401a1c <TC_init+0x84>)
  4019aa:	4798      	blx	r3
	tc_find_mck_divisor(freq, ul_sysclk, &ul_div, &ul_tcclks, ul_sysclk);
  4019ac:	4d1c      	ldr	r5, [pc, #112]	; (401a20 <TC_init+0x88>)
  4019ae:	9500      	str	r5, [sp, #0]
  4019b0:	ab02      	add	r3, sp, #8
  4019b2:	aa03      	add	r2, sp, #12
  4019b4:	4629      	mov	r1, r5
  4019b6:	4640      	mov	r0, r8
  4019b8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 401a3c <TC_init+0xa4>
  4019bc:	47c8      	blx	r9
	tc_init(TC, TC_CHANNEL, ul_tcclks | TC_CMR_CPCTRG);
  4019be:	9a02      	ldr	r2, [sp, #8]
  4019c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
  4019c4:	4639      	mov	r1, r7
  4019c6:	4630      	mov	r0, r6
  4019c8:	4b16      	ldr	r3, [pc, #88]	; (401a24 <TC_init+0x8c>)
  4019ca:	4798      	blx	r3
	tc_write_rc(TC, TC_CHANNEL, (ul_sysclk / ul_div) / freq);
  4019cc:	9a03      	ldr	r2, [sp, #12]
  4019ce:	fbb5 f2f2 	udiv	r2, r5, r2
  4019d2:	fbb2 f2f8 	udiv	r2, r2, r8
  4019d6:	4639      	mov	r1, r7
  4019d8:	4630      	mov	r0, r6
  4019da:	4b13      	ldr	r3, [pc, #76]	; (401a28 <TC_init+0x90>)
  4019dc:	4798      	blx	r3
	NVIC_SetPriority(ID_TC, 4);
  4019de:	b263      	sxtb	r3, r4
  if(IRQn < 0) {
  4019e0:	2b00      	cmp	r3, #0
  4019e2:	db13      	blt.n	401a0c <TC_init+0x74>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  4019e4:	4a11      	ldr	r2, [pc, #68]	; (401a2c <TC_init+0x94>)
  4019e6:	2180      	movs	r1, #128	; 0x80
  4019e8:	54d1      	strb	r1, [r2, r3]
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  4019ea:	095b      	lsrs	r3, r3, #5
  4019ec:	f004 041f 	and.w	r4, r4, #31
  4019f0:	2201      	movs	r2, #1
  4019f2:	fa02 f404 	lsl.w	r4, r2, r4
  4019f6:	4a0e      	ldr	r2, [pc, #56]	; (401a30 <TC_init+0x98>)
  4019f8:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
	tc_enable_interrupt(TC, TC_CHANNEL, TC_IER_CPCS);
  4019fc:	2210      	movs	r2, #16
  4019fe:	4639      	mov	r1, r7
  401a00:	4630      	mov	r0, r6
  401a02:	4b0c      	ldr	r3, [pc, #48]	; (401a34 <TC_init+0x9c>)
  401a04:	4798      	blx	r3
}
  401a06:	b005      	add	sp, #20
  401a08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401a0c:	f004 010f 	and.w	r1, r4, #15
  401a10:	4a09      	ldr	r2, [pc, #36]	; (401a38 <TC_init+0xa0>)
  401a12:	440a      	add	r2, r1
  401a14:	2180      	movs	r1, #128	; 0x80
  401a16:	7611      	strb	r1, [r2, #24]
  401a18:	e7e7      	b.n	4019ea <TC_init+0x52>
  401a1a:	bf00      	nop
  401a1c:	00401499 	.word	0x00401499
  401a20:	11e1a300 	.word	0x11e1a300
  401a24:	004006e7 	.word	0x004006e7
  401a28:	00400709 	.word	0x00400709
  401a2c:	e000e400 	.word	0xe000e400
  401a30:	e000e100 	.word	0xe000e100
  401a34:	00400711 	.word	0x00400711
  401a38:	e000ecfc 	.word	0xe000ecfc
  401a3c:	00400721 	.word	0x00400721

00401a40 <RTC_init>:

void RTC_init(Rtc *rtc, uint32_t id_rtc, calendar t, uint32_t irq_type) {
  401a40:	b082      	sub	sp, #8
  401a42:	b570      	push	{r4, r5, r6, lr}
  401a44:	b082      	sub	sp, #8
  401a46:	4605      	mov	r5, r0
  401a48:	460c      	mov	r4, r1
  401a4a:	a906      	add	r1, sp, #24
  401a4c:	e881 000c 	stmia.w	r1, {r2, r3}
	/* Configura o PMC */
	pmc_enable_periph_clk(ID_RTC);
  401a50:	2002      	movs	r0, #2
  401a52:	4b1d      	ldr	r3, [pc, #116]	; (401ac8 <RTC_init+0x88>)
  401a54:	4798      	blx	r3

	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(rtc, 0);
  401a56:	2100      	movs	r1, #0
  401a58:	4628      	mov	r0, r5
  401a5a:	4b1c      	ldr	r3, [pc, #112]	; (401acc <RTC_init+0x8c>)
  401a5c:	4798      	blx	r3

	/* Configura data e hora manualmente */
	rtc_set_date(rtc, t.year, t.month, t.day, t.week);
  401a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  401a60:	9300      	str	r3, [sp, #0]
  401a62:	9b08      	ldr	r3, [sp, #32]
  401a64:	9a07      	ldr	r2, [sp, #28]
  401a66:	9906      	ldr	r1, [sp, #24]
  401a68:	4628      	mov	r0, r5
  401a6a:	4e19      	ldr	r6, [pc, #100]	; (401ad0 <RTC_init+0x90>)
  401a6c:	47b0      	blx	r6
	rtc_set_time(rtc, t.hour, t.minute, t.second);
  401a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  401a70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  401a72:	990a      	ldr	r1, [sp, #40]	; 0x28
  401a74:	4628      	mov	r0, r5
  401a76:	4e17      	ldr	r6, [pc, #92]	; (401ad4 <RTC_init+0x94>)
  401a78:	47b0      	blx	r6

	/* Configure RTC interrupts */
	NVIC_DisableIRQ(id_rtc);
  401a7a:	b262      	sxtb	r2, r4
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
  401a7c:	b2e4      	uxtb	r4, r4
  401a7e:	f004 011f 	and.w	r1, r4, #31
  401a82:	2301      	movs	r3, #1
  401a84:	408b      	lsls	r3, r1
  401a86:	0956      	lsrs	r6, r2, #5
  401a88:	4813      	ldr	r0, [pc, #76]	; (401ad8 <RTC_init+0x98>)
  401a8a:	eb00 0186 	add.w	r1, r0, r6, lsl #2
  401a8e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
  401a92:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
  if(IRQn < 0) {
  401a96:	2a00      	cmp	r2, #0
  401a98:	db0f      	blt.n	401aba <RTC_init+0x7a>
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  401a9a:	490f      	ldr	r1, [pc, #60]	; (401ad8 <RTC_init+0x98>)
  401a9c:	4411      	add	r1, r2
  401a9e:	2280      	movs	r2, #128	; 0x80
  401aa0:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401aa4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
	NVIC_ClearPendingIRQ(id_rtc);
	NVIC_SetPriority(id_rtc, 4);
	NVIC_EnableIRQ(id_rtc);

	/* Ativa interrupcao via alarme */
	rtc_enable_interrupt(rtc,  irq_type);
  401aa8:	990d      	ldr	r1, [sp, #52]	; 0x34
  401aaa:	4628      	mov	r0, r5
  401aac:	4b0b      	ldr	r3, [pc, #44]	; (401adc <RTC_init+0x9c>)
  401aae:	4798      	blx	r3
}
  401ab0:	b002      	add	sp, #8
  401ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  401ab6:	b002      	add	sp, #8
  401ab8:	4770      	bx	lr
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  401aba:	f004 040f 	and.w	r4, r4, #15
  401abe:	4a08      	ldr	r2, [pc, #32]	; (401ae0 <RTC_init+0xa0>)
  401ac0:	2180      	movs	r1, #128	; 0x80
  401ac2:	5511      	strb	r1, [r2, r4]
  401ac4:	e7ee      	b.n	401aa4 <RTC_init+0x64>
  401ac6:	bf00      	nop
  401ac8:	00401499 	.word	0x00401499
  401acc:	004001ad 	.word	0x004001ad
  401ad0:	004003b9 	.word	0x004003b9
  401ad4:	00400221 	.word	0x00400221
  401ad8:	e000e100 	.word	0xe000e100
  401adc:	004001c3 	.word	0x004001c3
  401ae0:	e000ed14 	.word	0xe000ed14

00401ae4 <pisca_led>:

void pisca_led (int n, int t) {
  401ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (int i=0;i<n;i++){
  401ae8:	f1b0 0800 	subs.w	r8, r0, #0
  401aec:	dd30      	ble.n	401b50 <pisca_led+0x6c>
  401aee:	460f      	mov	r7, r1
		pio_clear(LED3_PIO, LED3_IDX_MASK);
		delay_ms(t);
  401af0:	17cd      	asrs	r5, r1, #31
  401af2:	4b18      	ldr	r3, [pc, #96]	; (401b54 <pisca_led+0x70>)
  401af4:	fba1 0103 	umull	r0, r1, r1, r3
  401af8:	fb03 1105 	mla	r1, r3, r5, r1
  401afc:	f241 722c 	movw	r2, #5932	; 0x172c
  401b00:	2300      	movs	r3, #0
  401b02:	f241 742b 	movw	r4, #5931	; 0x172b
  401b06:	2500      	movs	r5, #0
  401b08:	1900      	adds	r0, r0, r4
  401b0a:	4169      	adcs	r1, r5
  401b0c:	4c12      	ldr	r4, [pc, #72]	; (401b58 <pisca_led+0x74>)
  401b0e:	47a0      	blx	r4
  401b10:	4682      	mov	sl, r0
  401b12:	2400      	movs	r4, #0
		pio_clear(LED3_PIO, LED3_IDX_MASK);
  401b14:	4e11      	ldr	r6, [pc, #68]	; (401b5c <pisca_led+0x78>)
  401b16:	f8df 9050 	ldr.w	r9, [pc, #80]	; 401b68 <pisca_led+0x84>
		delay_ms(t);
  401b1a:	4d11      	ldr	r5, [pc, #68]	; (401b60 <pisca_led+0x7c>)
  401b1c:	e00a      	b.n	401b34 <pisca_led+0x50>
  401b1e:	2033      	movs	r0, #51	; 0x33
  401b20:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_IDX_MASK);
  401b22:	2104      	movs	r1, #4
  401b24:	4630      	mov	r0, r6
  401b26:	4b0f      	ldr	r3, [pc, #60]	; (401b64 <pisca_led+0x80>)
  401b28:	4798      	blx	r3
		delay_ms(t);
  401b2a:	2033      	movs	r0, #51	; 0x33
  401b2c:	47a8      	blx	r5
	for (int i=0;i<n;i++){
  401b2e:	3401      	adds	r4, #1
  401b30:	45a0      	cmp	r8, r4
  401b32:	d00d      	beq.n	401b50 <pisca_led+0x6c>
		pio_clear(LED3_PIO, LED3_IDX_MASK);
  401b34:	2104      	movs	r1, #4
  401b36:	4630      	mov	r0, r6
  401b38:	47c8      	blx	r9
		delay_ms(t);
  401b3a:	2f00      	cmp	r7, #0
  401b3c:	d0ef      	beq.n	401b1e <pisca_led+0x3a>
  401b3e:	4650      	mov	r0, sl
  401b40:	47a8      	blx	r5
		pio_set(LED3_PIO, LED3_IDX_MASK);
  401b42:	2104      	movs	r1, #4
  401b44:	4630      	mov	r0, r6
  401b46:	4b07      	ldr	r3, [pc, #28]	; (401b64 <pisca_led+0x80>)
  401b48:	4798      	blx	r3
		delay_ms(t);
  401b4a:	4650      	mov	r0, sl
  401b4c:	47a8      	blx	r5
  401b4e:	e7ee      	b.n	401b2e <pisca_led+0x4a>
  401b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b54:	11e1a300 	.word	0x11e1a300
  401b58:	00401d01 	.word	0x00401d01
  401b5c:	400e1000 	.word	0x400e1000
  401b60:	20400001 	.word	0x20400001
  401b64:	00401129 	.word	0x00401129
  401b68:	0040112d 	.word	0x0040112d

00401b6c <main>:
}



int main (void)
{
  401b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401b70:	b094      	sub	sp, #80	; 0x50
	board_init();
  401b72:	4b4b      	ldr	r3, [pc, #300]	; (401ca0 <main+0x134>)
  401b74:	4798      	blx	r3
	sysclk_init();
  401b76:	4b4b      	ldr	r3, [pc, #300]	; (401ca4 <main+0x138>)
  401b78:	4798      	blx	r3
	delay_init();
	
	LED_init(1);
  401b7a:	2001      	movs	r0, #1
  401b7c:	4b4a      	ldr	r3, [pc, #296]	; (401ca8 <main+0x13c>)
  401b7e:	4798      	blx	r3
	
	RTT_init(1, 4, RTT_MR_ALMIEN);  
  401b80:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  401b84:	2004      	movs	r0, #4
  401b86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
  401b8a:	4b48      	ldr	r3, [pc, #288]	; (401cac <main+0x140>)
  401b8c:	4798      	blx	r3
	
	/** Configura RTC */
	calendar rtc_initial = {2018, 3, 19, 12, 15, 45 ,1};
  401b8e:	ac0d      	add	r4, sp, #52	; 0x34
  401b90:	4d47      	ldr	r5, [pc, #284]	; (401cb0 <main+0x144>)
  401b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  401b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RTC_init(RTC, ID_RTC, rtc_initial, RTC_IER_ALREN);
  401b9e:	4e45      	ldr	r6, [pc, #276]	; (401cb4 <main+0x148>)
  401ba0:	2702      	movs	r7, #2
  401ba2:	9705      	str	r7, [sp, #20]
  401ba4:	466c      	mov	r4, sp
  401ba6:	ad0f      	add	r5, sp, #60	; 0x3c
  401ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  401baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  401bac:	682b      	ldr	r3, [r5, #0]
  401bae:	6023      	str	r3, [r4, #0]
  401bb0:	ab0d      	add	r3, sp, #52	; 0x34
  401bb2:	cb0c      	ldmia	r3, {r2, r3}
  401bb4:	4639      	mov	r1, r7
  401bb6:	4630      	mov	r0, r6
  401bb8:	4c3f      	ldr	r4, [pc, #252]	; (401cb8 <main+0x14c>)
  401bba:	47a0      	blx	r4
	
	/* Leitura do valor atual do RTC */
	uint32_t current_hour, current_min, current_sec;
	uint32_t current_year, current_month, current_day, current_week;
	rtc_get_time(RTC, &current_hour, &current_min, &current_sec);
  401bbc:	ab0a      	add	r3, sp, #40	; 0x28
  401bbe:	aa0b      	add	r2, sp, #44	; 0x2c
  401bc0:	a90c      	add	r1, sp, #48	; 0x30
  401bc2:	4630      	mov	r0, r6
  401bc4:	4c3d      	ldr	r4, [pc, #244]	; (401cbc <main+0x150>)
  401bc6:	47a0      	blx	r4
	rtc_get_date(RTC, &current_year, &current_month, &current_day, &current_week);
  401bc8:	ab06      	add	r3, sp, #24
  401bca:	9300      	str	r3, [sp, #0]
  401bcc:	ab07      	add	r3, sp, #28
  401bce:	aa08      	add	r2, sp, #32
  401bd0:	a909      	add	r1, sp, #36	; 0x24
  401bd2:	4630      	mov	r0, r6
  401bd4:	4c3a      	ldr	r4, [pc, #232]	; (401cc0 <main+0x154>)
  401bd6:	47a0      	blx	r4
	
	/* configura alarme do RTC para daqui 20 segundos */
	rtc_set_date_alarm(RTC, 1, current_month, 1, current_day);
  401bd8:	9b07      	ldr	r3, [sp, #28]
  401bda:	9300      	str	r3, [sp, #0]
  401bdc:	2301      	movs	r3, #1
  401bde:	9a08      	ldr	r2, [sp, #32]
  401be0:	4619      	mov	r1, r3
  401be2:	4630      	mov	r0, r6
  401be4:	4c37      	ldr	r4, [pc, #220]	; (401cc4 <main+0x158>)
  401be6:	47a0      	blx	r4
	rtc_set_time_alarm(RTC, 1, current_hour, 1, current_min, 1, current_sec + 20);
  401be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  401bea:	3314      	adds	r3, #20
  401bec:	9302      	str	r3, [sp, #8]
  401bee:	2401      	movs	r4, #1
  401bf0:	9401      	str	r4, [sp, #4]
  401bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  401bf4:	9300      	str	r3, [sp, #0]
  401bf6:	4623      	mov	r3, r4
  401bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  401bfa:	4621      	mov	r1, r4
  401bfc:	4630      	mov	r0, r6
  401bfe:	4d32      	ldr	r5, [pc, #200]	; (401cc8 <main+0x15c>)
  401c00:	47a8      	blx	r5

	/**
	 * Configura timer TC0, canal 1 
	 * e inicializa contagem 
	 */
	TC_init(TC0, ID_TC1, 1, 4);
  401c02:	4d32      	ldr	r5, [pc, #200]	; (401ccc <main+0x160>)
  401c04:	2304      	movs	r3, #4
  401c06:	4622      	mov	r2, r4
  401c08:	2118      	movs	r1, #24
  401c0a:	4628      	mov	r0, r5
  401c0c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 401cf8 <main+0x18c>
  401c10:	47c0      	blx	r8
	tc_start(TC0, 1);
  401c12:	4621      	mov	r1, r4
  401c14:	4628      	mov	r0, r5
  401c16:	4e2e      	ldr	r6, [pc, #184]	; (401cd0 <main+0x164>)
  401c18:	47b0      	blx	r6
	
	TC_init(TC0, ID_TC2, 2, 5);
  401c1a:	2305      	movs	r3, #5
  401c1c:	463a      	mov	r2, r7
  401c1e:	2119      	movs	r1, #25
  401c20:	4628      	mov	r0, r5
  401c22:	47c0      	blx	r8
	tc_start(TC0, 2);
  401c24:	4639      	mov	r1, r7
  401c26:	4628      	mov	r0, r5
  401c28:	47b0      	blx	r6

  // Init OLED
	gfx_mono_ssd1306_init();
  401c2a:	4b2a      	ldr	r3, [pc, #168]	; (401cd4 <main+0x168>)
  401c2c:	4798      	blx	r3
  
  
	gfx_mono_draw_filled_circle(20, 16, 16, GFX_PIXEL_SET, GFX_WHOLE);
  401c2e:	23ff      	movs	r3, #255	; 0xff
  401c30:	9300      	str	r3, [sp, #0]
  401c32:	4623      	mov	r3, r4
  401c34:	2210      	movs	r2, #16
  401c36:	4611      	mov	r1, r2
  401c38:	2014      	movs	r0, #20
  401c3a:	4c27      	ldr	r4, [pc, #156]	; (401cd8 <main+0x16c>)
  401c3c:	47a0      	blx	r4
	gfx_mono_draw_string("mundo", 50,16, &sysfont);
  401c3e:	4b27      	ldr	r3, [pc, #156]	; (401cdc <main+0x170>)
  401c40:	2210      	movs	r2, #16
  401c42:	2132      	movs	r1, #50	; 0x32
  401c44:	4826      	ldr	r0, [pc, #152]	; (401ce0 <main+0x174>)
  401c46:	4c27      	ldr	r4, [pc, #156]	; (401ce4 <main+0x178>)
  401c48:	47a0      	blx	r4

			// Escreve na tela um circulo e um texto
			
			for(int i=70;i<=120;i+=2){
				
				gfx_mono_draw_rect(i, 5, 2, 10, GFX_PIXEL_SET);
  401c4a:	4f27      	ldr	r7, [pc, #156]	; (401ce8 <main+0x17c>)
				delay_ms(10);
  401c4c:	4e27      	ldr	r6, [pc, #156]	; (401cec <main+0x180>)
  401c4e:	4d28      	ldr	r5, [pc, #160]	; (401cf0 <main+0x184>)
				gfx_mono_draw_rect(i, 5, 2, 10, GFX_PIXEL_CLR);
				delay_ms(10);
				
			}
			
			if(flag_rtc_alarm){
  401c50:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 401cfc <main+0x190>
			for(int i=70;i<=120;i+=2){
  401c54:	2446      	movs	r4, #70	; 0x46
				gfx_mono_draw_rect(i, 5, 2, 10, GFX_PIXEL_SET);
  401c56:	2301      	movs	r3, #1
  401c58:	9300      	str	r3, [sp, #0]
  401c5a:	230a      	movs	r3, #10
  401c5c:	2202      	movs	r2, #2
  401c5e:	2105      	movs	r1, #5
  401c60:	b2e0      	uxtb	r0, r4
  401c62:	47b8      	blx	r7
				delay_ms(10);
  401c64:	4630      	mov	r0, r6
  401c66:	47a8      	blx	r5
			for(int i=70;i<=120;i+=2){
  401c68:	3402      	adds	r4, #2
  401c6a:	2c7a      	cmp	r4, #122	; 0x7a
  401c6c:	d1f3      	bne.n	401c56 <main+0xea>
  401c6e:	2478      	movs	r4, #120	; 0x78
				gfx_mono_draw_rect(i, 5, 2, 10, GFX_PIXEL_CLR);
  401c70:	2300      	movs	r3, #0
  401c72:	9300      	str	r3, [sp, #0]
  401c74:	230a      	movs	r3, #10
  401c76:	2202      	movs	r2, #2
  401c78:	2105      	movs	r1, #5
  401c7a:	b2e0      	uxtb	r0, r4
  401c7c:	47b8      	blx	r7
				delay_ms(10);
  401c7e:	4630      	mov	r0, r6
  401c80:	47a8      	blx	r5
			for(int i=120;i>=70;i-=2){
  401c82:	3c02      	subs	r4, #2
  401c84:	2c44      	cmp	r4, #68	; 0x44
  401c86:	d1f3      	bne.n	401c70 <main+0x104>
			if(flag_rtc_alarm){
  401c88:	f898 3000 	ldrb.w	r3, [r8]
  401c8c:	2b00      	cmp	r3, #0
  401c8e:	d0e1      	beq.n	401c54 <main+0xe8>
				pisca_led(5, 200);
  401c90:	21c8      	movs	r1, #200	; 0xc8
  401c92:	2005      	movs	r0, #5
  401c94:	4b17      	ldr	r3, [pc, #92]	; (401cf4 <main+0x188>)
  401c96:	4798      	blx	r3
				flag_rtc_alarm = 0;
  401c98:	2300      	movs	r3, #0
  401c9a:	f888 3000 	strb.w	r3, [r8]
  401c9e:	e7d9      	b.n	401c54 <main+0xe8>
  401ca0:	00400fe9 	.word	0x00400fe9
  401ca4:	00400f79 	.word	0x00400f79
  401ca8:	00401859 	.word	0x00401859
  401cac:	00401751 	.word	0x00401751
  401cb0:	00402bc8 	.word	0x00402bc8
  401cb4:	400e1860 	.word	0x400e1860
  401cb8:	00401a41 	.word	0x00401a41
  401cbc:	004001c7 	.word	0x004001c7
  401cc0:	00400345 	.word	0x00400345
  401cc4:	00400471 	.word	0x00400471
  401cc8:	004002b1 	.word	0x004002b1
  401ccc:	4000c000 	.word	0x4000c000
  401cd0:	00400701 	.word	0x00400701
  401cd4:	00400c15 	.word	0x00400c15
  401cd8:	004009b5 	.word	0x004009b5
  401cdc:	2040000c 	.word	0x2040000c
  401ce0:	00402be4 	.word	0x00402be4
  401ce4:	00400b7d 	.word	0x00400b7d
  401ce8:	0040092d 	.word	0x0040092d
  401cec:	0007b784 	.word	0x0007b784
  401cf0:	20400001 	.word	0x20400001
  401cf4:	00401ae5 	.word	0x00401ae5
  401cf8:	00401999 	.word	0x00401999
  401cfc:	204006e0 	.word	0x204006e0

00401d00 <__aeabi_uldivmod>:
  401d00:	b953      	cbnz	r3, 401d18 <__aeabi_uldivmod+0x18>
  401d02:	b94a      	cbnz	r2, 401d18 <__aeabi_uldivmod+0x18>
  401d04:	2900      	cmp	r1, #0
  401d06:	bf08      	it	eq
  401d08:	2800      	cmpeq	r0, #0
  401d0a:	bf1c      	itt	ne
  401d0c:	f04f 31ff 	movne.w	r1, #4294967295
  401d10:	f04f 30ff 	movne.w	r0, #4294967295
  401d14:	f000 b97a 	b.w	40200c <__aeabi_idiv0>
  401d18:	f1ad 0c08 	sub.w	ip, sp, #8
  401d1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  401d20:	f000 f806 	bl	401d30 <__udivmoddi4>
  401d24:	f8dd e004 	ldr.w	lr, [sp, #4]
  401d28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401d2c:	b004      	add	sp, #16
  401d2e:	4770      	bx	lr

00401d30 <__udivmoddi4>:
  401d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401d34:	468c      	mov	ip, r1
  401d36:	460d      	mov	r5, r1
  401d38:	4604      	mov	r4, r0
  401d3a:	9e08      	ldr	r6, [sp, #32]
  401d3c:	2b00      	cmp	r3, #0
  401d3e:	d151      	bne.n	401de4 <__udivmoddi4+0xb4>
  401d40:	428a      	cmp	r2, r1
  401d42:	4617      	mov	r7, r2
  401d44:	d96d      	bls.n	401e22 <__udivmoddi4+0xf2>
  401d46:	fab2 fe82 	clz	lr, r2
  401d4a:	f1be 0f00 	cmp.w	lr, #0
  401d4e:	d00b      	beq.n	401d68 <__udivmoddi4+0x38>
  401d50:	f1ce 0c20 	rsb	ip, lr, #32
  401d54:	fa01 f50e 	lsl.w	r5, r1, lr
  401d58:	fa20 fc0c 	lsr.w	ip, r0, ip
  401d5c:	fa02 f70e 	lsl.w	r7, r2, lr
  401d60:	ea4c 0c05 	orr.w	ip, ip, r5
  401d64:	fa00 f40e 	lsl.w	r4, r0, lr
  401d68:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401d6c:	0c25      	lsrs	r5, r4, #16
  401d6e:	fbbc f8fa 	udiv	r8, ip, sl
  401d72:	fa1f f987 	uxth.w	r9, r7
  401d76:	fb0a cc18 	mls	ip, sl, r8, ip
  401d7a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401d7e:	fb08 f309 	mul.w	r3, r8, r9
  401d82:	42ab      	cmp	r3, r5
  401d84:	d90a      	bls.n	401d9c <__udivmoddi4+0x6c>
  401d86:	19ed      	adds	r5, r5, r7
  401d88:	f108 32ff 	add.w	r2, r8, #4294967295
  401d8c:	f080 8123 	bcs.w	401fd6 <__udivmoddi4+0x2a6>
  401d90:	42ab      	cmp	r3, r5
  401d92:	f240 8120 	bls.w	401fd6 <__udivmoddi4+0x2a6>
  401d96:	f1a8 0802 	sub.w	r8, r8, #2
  401d9a:	443d      	add	r5, r7
  401d9c:	1aed      	subs	r5, r5, r3
  401d9e:	b2a4      	uxth	r4, r4
  401da0:	fbb5 f0fa 	udiv	r0, r5, sl
  401da4:	fb0a 5510 	mls	r5, sl, r0, r5
  401da8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401dac:	fb00 f909 	mul.w	r9, r0, r9
  401db0:	45a1      	cmp	r9, r4
  401db2:	d909      	bls.n	401dc8 <__udivmoddi4+0x98>
  401db4:	19e4      	adds	r4, r4, r7
  401db6:	f100 33ff 	add.w	r3, r0, #4294967295
  401dba:	f080 810a 	bcs.w	401fd2 <__udivmoddi4+0x2a2>
  401dbe:	45a1      	cmp	r9, r4
  401dc0:	f240 8107 	bls.w	401fd2 <__udivmoddi4+0x2a2>
  401dc4:	3802      	subs	r0, #2
  401dc6:	443c      	add	r4, r7
  401dc8:	eba4 0409 	sub.w	r4, r4, r9
  401dcc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401dd0:	2100      	movs	r1, #0
  401dd2:	2e00      	cmp	r6, #0
  401dd4:	d061      	beq.n	401e9a <__udivmoddi4+0x16a>
  401dd6:	fa24 f40e 	lsr.w	r4, r4, lr
  401dda:	2300      	movs	r3, #0
  401ddc:	6034      	str	r4, [r6, #0]
  401dde:	6073      	str	r3, [r6, #4]
  401de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401de4:	428b      	cmp	r3, r1
  401de6:	d907      	bls.n	401df8 <__udivmoddi4+0xc8>
  401de8:	2e00      	cmp	r6, #0
  401dea:	d054      	beq.n	401e96 <__udivmoddi4+0x166>
  401dec:	2100      	movs	r1, #0
  401dee:	e886 0021 	stmia.w	r6, {r0, r5}
  401df2:	4608      	mov	r0, r1
  401df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401df8:	fab3 f183 	clz	r1, r3
  401dfc:	2900      	cmp	r1, #0
  401dfe:	f040 808e 	bne.w	401f1e <__udivmoddi4+0x1ee>
  401e02:	42ab      	cmp	r3, r5
  401e04:	d302      	bcc.n	401e0c <__udivmoddi4+0xdc>
  401e06:	4282      	cmp	r2, r0
  401e08:	f200 80fa 	bhi.w	402000 <__udivmoddi4+0x2d0>
  401e0c:	1a84      	subs	r4, r0, r2
  401e0e:	eb65 0503 	sbc.w	r5, r5, r3
  401e12:	2001      	movs	r0, #1
  401e14:	46ac      	mov	ip, r5
  401e16:	2e00      	cmp	r6, #0
  401e18:	d03f      	beq.n	401e9a <__udivmoddi4+0x16a>
  401e1a:	e886 1010 	stmia.w	r6, {r4, ip}
  401e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e22:	b912      	cbnz	r2, 401e2a <__udivmoddi4+0xfa>
  401e24:	2701      	movs	r7, #1
  401e26:	fbb7 f7f2 	udiv	r7, r7, r2
  401e2a:	fab7 fe87 	clz	lr, r7
  401e2e:	f1be 0f00 	cmp.w	lr, #0
  401e32:	d134      	bne.n	401e9e <__udivmoddi4+0x16e>
  401e34:	1beb      	subs	r3, r5, r7
  401e36:	0c3a      	lsrs	r2, r7, #16
  401e38:	fa1f fc87 	uxth.w	ip, r7
  401e3c:	2101      	movs	r1, #1
  401e3e:	fbb3 f8f2 	udiv	r8, r3, r2
  401e42:	0c25      	lsrs	r5, r4, #16
  401e44:	fb02 3318 	mls	r3, r2, r8, r3
  401e48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401e4c:	fb0c f308 	mul.w	r3, ip, r8
  401e50:	42ab      	cmp	r3, r5
  401e52:	d907      	bls.n	401e64 <__udivmoddi4+0x134>
  401e54:	19ed      	adds	r5, r5, r7
  401e56:	f108 30ff 	add.w	r0, r8, #4294967295
  401e5a:	d202      	bcs.n	401e62 <__udivmoddi4+0x132>
  401e5c:	42ab      	cmp	r3, r5
  401e5e:	f200 80d1 	bhi.w	402004 <__udivmoddi4+0x2d4>
  401e62:	4680      	mov	r8, r0
  401e64:	1aed      	subs	r5, r5, r3
  401e66:	b2a3      	uxth	r3, r4
  401e68:	fbb5 f0f2 	udiv	r0, r5, r2
  401e6c:	fb02 5510 	mls	r5, r2, r0, r5
  401e70:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401e74:	fb0c fc00 	mul.w	ip, ip, r0
  401e78:	45a4      	cmp	ip, r4
  401e7a:	d907      	bls.n	401e8c <__udivmoddi4+0x15c>
  401e7c:	19e4      	adds	r4, r4, r7
  401e7e:	f100 33ff 	add.w	r3, r0, #4294967295
  401e82:	d202      	bcs.n	401e8a <__udivmoddi4+0x15a>
  401e84:	45a4      	cmp	ip, r4
  401e86:	f200 80b8 	bhi.w	401ffa <__udivmoddi4+0x2ca>
  401e8a:	4618      	mov	r0, r3
  401e8c:	eba4 040c 	sub.w	r4, r4, ip
  401e90:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401e94:	e79d      	b.n	401dd2 <__udivmoddi4+0xa2>
  401e96:	4631      	mov	r1, r6
  401e98:	4630      	mov	r0, r6
  401e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401e9e:	f1ce 0420 	rsb	r4, lr, #32
  401ea2:	fa05 f30e 	lsl.w	r3, r5, lr
  401ea6:	fa07 f70e 	lsl.w	r7, r7, lr
  401eaa:	fa20 f804 	lsr.w	r8, r0, r4
  401eae:	0c3a      	lsrs	r2, r7, #16
  401eb0:	fa25 f404 	lsr.w	r4, r5, r4
  401eb4:	ea48 0803 	orr.w	r8, r8, r3
  401eb8:	fbb4 f1f2 	udiv	r1, r4, r2
  401ebc:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401ec0:	fb02 4411 	mls	r4, r2, r1, r4
  401ec4:	fa1f fc87 	uxth.w	ip, r7
  401ec8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401ecc:	fb01 f30c 	mul.w	r3, r1, ip
  401ed0:	42ab      	cmp	r3, r5
  401ed2:	fa00 f40e 	lsl.w	r4, r0, lr
  401ed6:	d909      	bls.n	401eec <__udivmoddi4+0x1bc>
  401ed8:	19ed      	adds	r5, r5, r7
  401eda:	f101 30ff 	add.w	r0, r1, #4294967295
  401ede:	f080 808a 	bcs.w	401ff6 <__udivmoddi4+0x2c6>
  401ee2:	42ab      	cmp	r3, r5
  401ee4:	f240 8087 	bls.w	401ff6 <__udivmoddi4+0x2c6>
  401ee8:	3902      	subs	r1, #2
  401eea:	443d      	add	r5, r7
  401eec:	1aeb      	subs	r3, r5, r3
  401eee:	fa1f f588 	uxth.w	r5, r8
  401ef2:	fbb3 f0f2 	udiv	r0, r3, r2
  401ef6:	fb02 3310 	mls	r3, r2, r0, r3
  401efa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401efe:	fb00 f30c 	mul.w	r3, r0, ip
  401f02:	42ab      	cmp	r3, r5
  401f04:	d907      	bls.n	401f16 <__udivmoddi4+0x1e6>
  401f06:	19ed      	adds	r5, r5, r7
  401f08:	f100 38ff 	add.w	r8, r0, #4294967295
  401f0c:	d26f      	bcs.n	401fee <__udivmoddi4+0x2be>
  401f0e:	42ab      	cmp	r3, r5
  401f10:	d96d      	bls.n	401fee <__udivmoddi4+0x2be>
  401f12:	3802      	subs	r0, #2
  401f14:	443d      	add	r5, r7
  401f16:	1aeb      	subs	r3, r5, r3
  401f18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401f1c:	e78f      	b.n	401e3e <__udivmoddi4+0x10e>
  401f1e:	f1c1 0720 	rsb	r7, r1, #32
  401f22:	fa22 f807 	lsr.w	r8, r2, r7
  401f26:	408b      	lsls	r3, r1
  401f28:	fa05 f401 	lsl.w	r4, r5, r1
  401f2c:	ea48 0303 	orr.w	r3, r8, r3
  401f30:	fa20 fe07 	lsr.w	lr, r0, r7
  401f34:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401f38:	40fd      	lsrs	r5, r7
  401f3a:	ea4e 0e04 	orr.w	lr, lr, r4
  401f3e:	fbb5 f9fc 	udiv	r9, r5, ip
  401f42:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401f46:	fb0c 5519 	mls	r5, ip, r9, r5
  401f4a:	fa1f f883 	uxth.w	r8, r3
  401f4e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401f52:	fb09 f408 	mul.w	r4, r9, r8
  401f56:	42ac      	cmp	r4, r5
  401f58:	fa02 f201 	lsl.w	r2, r2, r1
  401f5c:	fa00 fa01 	lsl.w	sl, r0, r1
  401f60:	d908      	bls.n	401f74 <__udivmoddi4+0x244>
  401f62:	18ed      	adds	r5, r5, r3
  401f64:	f109 30ff 	add.w	r0, r9, #4294967295
  401f68:	d243      	bcs.n	401ff2 <__udivmoddi4+0x2c2>
  401f6a:	42ac      	cmp	r4, r5
  401f6c:	d941      	bls.n	401ff2 <__udivmoddi4+0x2c2>
  401f6e:	f1a9 0902 	sub.w	r9, r9, #2
  401f72:	441d      	add	r5, r3
  401f74:	1b2d      	subs	r5, r5, r4
  401f76:	fa1f fe8e 	uxth.w	lr, lr
  401f7a:	fbb5 f0fc 	udiv	r0, r5, ip
  401f7e:	fb0c 5510 	mls	r5, ip, r0, r5
  401f82:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401f86:	fb00 f808 	mul.w	r8, r0, r8
  401f8a:	45a0      	cmp	r8, r4
  401f8c:	d907      	bls.n	401f9e <__udivmoddi4+0x26e>
  401f8e:	18e4      	adds	r4, r4, r3
  401f90:	f100 35ff 	add.w	r5, r0, #4294967295
  401f94:	d229      	bcs.n	401fea <__udivmoddi4+0x2ba>
  401f96:	45a0      	cmp	r8, r4
  401f98:	d927      	bls.n	401fea <__udivmoddi4+0x2ba>
  401f9a:	3802      	subs	r0, #2
  401f9c:	441c      	add	r4, r3
  401f9e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401fa2:	eba4 0408 	sub.w	r4, r4, r8
  401fa6:	fba0 8902 	umull	r8, r9, r0, r2
  401faa:	454c      	cmp	r4, r9
  401fac:	46c6      	mov	lr, r8
  401fae:	464d      	mov	r5, r9
  401fb0:	d315      	bcc.n	401fde <__udivmoddi4+0x2ae>
  401fb2:	d012      	beq.n	401fda <__udivmoddi4+0x2aa>
  401fb4:	b156      	cbz	r6, 401fcc <__udivmoddi4+0x29c>
  401fb6:	ebba 030e 	subs.w	r3, sl, lr
  401fba:	eb64 0405 	sbc.w	r4, r4, r5
  401fbe:	fa04 f707 	lsl.w	r7, r4, r7
  401fc2:	40cb      	lsrs	r3, r1
  401fc4:	431f      	orrs	r7, r3
  401fc6:	40cc      	lsrs	r4, r1
  401fc8:	6037      	str	r7, [r6, #0]
  401fca:	6074      	str	r4, [r6, #4]
  401fcc:	2100      	movs	r1, #0
  401fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401fd2:	4618      	mov	r0, r3
  401fd4:	e6f8      	b.n	401dc8 <__udivmoddi4+0x98>
  401fd6:	4690      	mov	r8, r2
  401fd8:	e6e0      	b.n	401d9c <__udivmoddi4+0x6c>
  401fda:	45c2      	cmp	sl, r8
  401fdc:	d2ea      	bcs.n	401fb4 <__udivmoddi4+0x284>
  401fde:	ebb8 0e02 	subs.w	lr, r8, r2
  401fe2:	eb69 0503 	sbc.w	r5, r9, r3
  401fe6:	3801      	subs	r0, #1
  401fe8:	e7e4      	b.n	401fb4 <__udivmoddi4+0x284>
  401fea:	4628      	mov	r0, r5
  401fec:	e7d7      	b.n	401f9e <__udivmoddi4+0x26e>
  401fee:	4640      	mov	r0, r8
  401ff0:	e791      	b.n	401f16 <__udivmoddi4+0x1e6>
  401ff2:	4681      	mov	r9, r0
  401ff4:	e7be      	b.n	401f74 <__udivmoddi4+0x244>
  401ff6:	4601      	mov	r1, r0
  401ff8:	e778      	b.n	401eec <__udivmoddi4+0x1bc>
  401ffa:	3802      	subs	r0, #2
  401ffc:	443c      	add	r4, r7
  401ffe:	e745      	b.n	401e8c <__udivmoddi4+0x15c>
  402000:	4608      	mov	r0, r1
  402002:	e708      	b.n	401e16 <__udivmoddi4+0xe6>
  402004:	f1a8 0802 	sub.w	r8, r8, #2
  402008:	443d      	add	r5, r7
  40200a:	e72b      	b.n	401e64 <__udivmoddi4+0x134>

0040200c <__aeabi_idiv0>:
  40200c:	4770      	bx	lr
  40200e:	bf00      	nop

00402010 <__libc_init_array>:
  402010:	b570      	push	{r4, r5, r6, lr}
  402012:	4e0f      	ldr	r6, [pc, #60]	; (402050 <__libc_init_array+0x40>)
  402014:	4d0f      	ldr	r5, [pc, #60]	; (402054 <__libc_init_array+0x44>)
  402016:	1b76      	subs	r6, r6, r5
  402018:	10b6      	asrs	r6, r6, #2
  40201a:	bf18      	it	ne
  40201c:	2400      	movne	r4, #0
  40201e:	d005      	beq.n	40202c <__libc_init_array+0x1c>
  402020:	3401      	adds	r4, #1
  402022:	f855 3b04 	ldr.w	r3, [r5], #4
  402026:	4798      	blx	r3
  402028:	42a6      	cmp	r6, r4
  40202a:	d1f9      	bne.n	402020 <__libc_init_array+0x10>
  40202c:	4e0a      	ldr	r6, [pc, #40]	; (402058 <__libc_init_array+0x48>)
  40202e:	4d0b      	ldr	r5, [pc, #44]	; (40205c <__libc_init_array+0x4c>)
  402030:	1b76      	subs	r6, r6, r5
  402032:	f000 fddd 	bl	402bf0 <_init>
  402036:	10b6      	asrs	r6, r6, #2
  402038:	bf18      	it	ne
  40203a:	2400      	movne	r4, #0
  40203c:	d006      	beq.n	40204c <__libc_init_array+0x3c>
  40203e:	3401      	adds	r4, #1
  402040:	f855 3b04 	ldr.w	r3, [r5], #4
  402044:	4798      	blx	r3
  402046:	42a6      	cmp	r6, r4
  402048:	d1f9      	bne.n	40203e <__libc_init_array+0x2e>
  40204a:	bd70      	pop	{r4, r5, r6, pc}
  40204c:	bd70      	pop	{r4, r5, r6, pc}
  40204e:	bf00      	nop
  402050:	00402bfc 	.word	0x00402bfc
  402054:	00402bfc 	.word	0x00402bfc
  402058:	00402c04 	.word	0x00402c04
  40205c:	00402bfc 	.word	0x00402bfc

00402060 <register_fini>:
  402060:	4b02      	ldr	r3, [pc, #8]	; (40206c <register_fini+0xc>)
  402062:	b113      	cbz	r3, 40206a <register_fini+0xa>
  402064:	4802      	ldr	r0, [pc, #8]	; (402070 <register_fini+0x10>)
  402066:	f000 b805 	b.w	402074 <atexit>
  40206a:	4770      	bx	lr
  40206c:	00000000 	.word	0x00000000
  402070:	00402081 	.word	0x00402081

00402074 <atexit>:
  402074:	2300      	movs	r3, #0
  402076:	4601      	mov	r1, r0
  402078:	461a      	mov	r2, r3
  40207a:	4618      	mov	r0, r3
  40207c:	f000 b81e 	b.w	4020bc <__register_exitproc>

00402080 <__libc_fini_array>:
  402080:	b538      	push	{r3, r4, r5, lr}
  402082:	4c0a      	ldr	r4, [pc, #40]	; (4020ac <__libc_fini_array+0x2c>)
  402084:	4d0a      	ldr	r5, [pc, #40]	; (4020b0 <__libc_fini_array+0x30>)
  402086:	1b64      	subs	r4, r4, r5
  402088:	10a4      	asrs	r4, r4, #2
  40208a:	d00a      	beq.n	4020a2 <__libc_fini_array+0x22>
  40208c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  402090:	3b01      	subs	r3, #1
  402092:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  402096:	3c01      	subs	r4, #1
  402098:	f855 3904 	ldr.w	r3, [r5], #-4
  40209c:	4798      	blx	r3
  40209e:	2c00      	cmp	r4, #0
  4020a0:	d1f9      	bne.n	402096 <__libc_fini_array+0x16>
  4020a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4020a6:	f000 bdad 	b.w	402c04 <_fini>
  4020aa:	bf00      	nop
  4020ac:	00402c14 	.word	0x00402c14
  4020b0:	00402c10 	.word	0x00402c10

004020b4 <__retarget_lock_acquire_recursive>:
  4020b4:	4770      	bx	lr
  4020b6:	bf00      	nop

004020b8 <__retarget_lock_release_recursive>:
  4020b8:	4770      	bx	lr
  4020ba:	bf00      	nop

004020bc <__register_exitproc>:
  4020bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4020c0:	4d2c      	ldr	r5, [pc, #176]	; (402174 <__register_exitproc+0xb8>)
  4020c2:	4606      	mov	r6, r0
  4020c4:	6828      	ldr	r0, [r5, #0]
  4020c6:	4698      	mov	r8, r3
  4020c8:	460f      	mov	r7, r1
  4020ca:	4691      	mov	r9, r2
  4020cc:	f7ff fff2 	bl	4020b4 <__retarget_lock_acquire_recursive>
  4020d0:	4b29      	ldr	r3, [pc, #164]	; (402178 <__register_exitproc+0xbc>)
  4020d2:	681c      	ldr	r4, [r3, #0]
  4020d4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4020d8:	2b00      	cmp	r3, #0
  4020da:	d03e      	beq.n	40215a <__register_exitproc+0x9e>
  4020dc:	685a      	ldr	r2, [r3, #4]
  4020de:	2a1f      	cmp	r2, #31
  4020e0:	dc1c      	bgt.n	40211c <__register_exitproc+0x60>
  4020e2:	f102 0e01 	add.w	lr, r2, #1
  4020e6:	b176      	cbz	r6, 402106 <__register_exitproc+0x4a>
  4020e8:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4020ec:	2401      	movs	r4, #1
  4020ee:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4020f2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4020f6:	4094      	lsls	r4, r2
  4020f8:	4320      	orrs	r0, r4
  4020fa:	2e02      	cmp	r6, #2
  4020fc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  402100:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  402104:	d023      	beq.n	40214e <__register_exitproc+0x92>
  402106:	3202      	adds	r2, #2
  402108:	f8c3 e004 	str.w	lr, [r3, #4]
  40210c:	6828      	ldr	r0, [r5, #0]
  40210e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  402112:	f7ff ffd1 	bl	4020b8 <__retarget_lock_release_recursive>
  402116:	2000      	movs	r0, #0
  402118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40211c:	4b17      	ldr	r3, [pc, #92]	; (40217c <__register_exitproc+0xc0>)
  40211e:	b30b      	cbz	r3, 402164 <__register_exitproc+0xa8>
  402120:	f44f 70c8 	mov.w	r0, #400	; 0x190
  402124:	f3af 8000 	nop.w
  402128:	4603      	mov	r3, r0
  40212a:	b1d8      	cbz	r0, 402164 <__register_exitproc+0xa8>
  40212c:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  402130:	6002      	str	r2, [r0, #0]
  402132:	2100      	movs	r1, #0
  402134:	6041      	str	r1, [r0, #4]
  402136:	460a      	mov	r2, r1
  402138:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  40213c:	f04f 0e01 	mov.w	lr, #1
  402140:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  402144:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  402148:	2e00      	cmp	r6, #0
  40214a:	d0dc      	beq.n	402106 <__register_exitproc+0x4a>
  40214c:	e7cc      	b.n	4020e8 <__register_exitproc+0x2c>
  40214e:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  402152:	430c      	orrs	r4, r1
  402154:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  402158:	e7d5      	b.n	402106 <__register_exitproc+0x4a>
  40215a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40215e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  402162:	e7bb      	b.n	4020dc <__register_exitproc+0x20>
  402164:	6828      	ldr	r0, [r5, #0]
  402166:	f7ff ffa7 	bl	4020b8 <__retarget_lock_release_recursive>
  40216a:	f04f 30ff 	mov.w	r0, #4294967295
  40216e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  402172:	bf00      	nop
  402174:	20400448 	.word	0x20400448
  402178:	00402bec 	.word	0x00402bec
  40217c:	00000000 	.word	0x00000000

00402180 <sysfont_glyphs>:
	...
  4021a0:	00300030 00300030 00300030 00300000     0.0.0.0.0.0...0.
  4021b0:	00000030 00000000 00000000 006c006c     0...........l.l.
  4021c0:	006c006c 00000000 00000000 00000000     l.l.............
	...
  4021d8:	00280000 007c0028 00280028 0028007c     ..(.(.|.(.(.|.(.
  4021e8:	00000028 00000000 00000000 003c0010     (.............<.
  4021f8:	00200040 00080010 00780004 00000010     @. .......x.....
	...
  402210:	007c0000 00a800a4 00280050 00940054     ..|.....P.(.T...
  402220:	00000088 00000000 00000000 00900060     ............`...
  402230:	00900090 00940060 00880088 00000070     ....`.......p...
	...
  402248:	00100010 00000010 00000000 00000000     ................
	...
  402264:	00100008 00200020 00200020 00200020     .... . . . . . .
  402274:	00080010 00000000 00000000 00100020     ............ ...
  402284:	00080008 00080008 00080008 00200010     .............. .
  402294:	00000000 00280000 007c0010 00280010     ......(...|...(.
	...
  4022bc:	00100010 00fe0010 00100010 00000010     ................
	...
  4022e4:	00300010 00000020 00000000 00000000     ..0. ...........
  4022f4:	00000000 007c0000 00000000 00000000     ......|.........
	...
  402318:	00300000 00000030 00000000 00000000     ..0.0...........
  402328:	00080000 00100008 00200010 00400020     .......... . .@.
  402338:	00000040 00000000 00000000 00780000     @.............x.
  402348:	008c0084 00a40094 008400c4 00000078     ............x...
	...
  402360:	00100000 00500030 00100010 00100010     ....0.P.........
  402370:	0000007c 00000000 00000000 00700000     |.............p.
  402380:	00080088 00200010 00800040 000000f8     ...... .@.......
	...
  402398:	00700000 00080088 00080030 00880008     ..p.....0.......
  4023a8:	00000070 00000000 00000000 00080000     p...............
  4023b8:	00280018 00880048 000800fc 00000008     ..(.H...........
	...
  4023d0:	00780000 00800080 000800f0 00080008     ..x.............
  4023e0:	000000f0 00000000 00000000 00300000     ..............0.
  4023f0:	00800040 008800f0 00880088 00000070     @...........p...
	...
  402408:	00f80000 00100008 00200010 00400020     .......... . .@.
  402418:	00000040 00000000 00000000 00700000     @.............p.
  402428:	00880088 00880070 00880088 00000070     ....p.......p...
	...
  402440:	00700000 00880088 00780088 00100008     ..p.......x.....
  402450:	00000060 00000000 00000000 00000000     `...............
  402460:	00300000 00000030 00300000 00000030     ..0.0.....0.0...
	...
  40247c:	00300000 00000030 00300000 00600030     ..0.0.....0.0.`.
  40248c:	00000040 00000000 00000000 00100008     @...............
  40249c:	00400020 00100020 00000008 00000000      .@. ...........
	...
  4024b8:	0000007c 0000007c 00000000 00000000     |...|...........
	...
  4024d0:	00200040 00080010 00200010 00000040     @. ....... .@...
	...
  4024e8:	00300000 00080048 00200010 00000000     ..0.H..... .....
  4024f8:	00000020 00000000 00000000 00000000      ...............
  402508:	0042003c 00aa009a 00be00aa 00780080     <.B...........x.
	...
  402520:	00100000 00280028 007c0044 00440044     ....(.(.D.|.D.D.
  402530:	00000044 00000000 00000000 00f80000     D...............
  402540:	00840084 008400f8 00840084 000000f8     ................
	...
  402558:	003c0000 00800040 00800080 00400080     ..<.@.........@.
  402568:	0000003c 00000000 00000000 00f00000     <...............
  402578:	00840088 00840084 00880084 000000f0     ................
	...
  402590:	00f80000 00800080 008000f0 00800080     ................
  4025a0:	000000f8 00000000 00000000 00f80000     ................
  4025b0:	00800080 008000f8 00800080 00000080     ................
	...
  4025c8:	003c0000 00800040 009c0080 00440084     ..<.@.........D.
  4025d8:	00000038 00000000 00000000 00880000     8...............
  4025e8:	00880088 008800f8 00880088 00000088     ................
	...
  402600:	00f80000 00200020 00200020 00200020     .... . . . . . .
  402610:	000000f8 00000000 00000000 00f80000     ................
  402620:	00080008 00080008 00080008 000000f0     ................
	...
  402638:	00840000 00900088 00d000a0 00840088     ................
  402648:	00000084 00000000 00000000 00800000     ................
  402658:	00800080 00800080 00800080 000000fc     ................
	...
  402670:	00840000 00cc00cc 00b400b4 00840084     ................
  402680:	00000084 00000000 00000000 00840000     ................
  402690:	00c400c4 00a400a4 00940094 0000008c     ................
	...
  4026a8:	00780000 00840084 00840084 00840084     ..x.............
  4026b8:	00000078 00000000 00000000 00f80000     x...............
  4026c8:	00840084 00f80084 00800080 00000080     ................
	...
  4026e0:	00780000 00840084 00840084 00840084     ..x.............
  4026f0:	00200078 00000018 00000000 00f80000     x. .............
  402700:	00840084 00f80084 00840088 00000084     ................
	...
  402718:	007c0000 00800080 00180060 00040004     ..|.....`.......
  402728:	000000f8 00000000 00000000 00f80000     ................
  402738:	00200020 00200020 00200020 00000020      . . . . . . ...
	...
  402750:	00840000 00840084 00840084 00840084     ................
  402760:	00000078 00000000 00000000 00840000     x...............
  402770:	00840084 00480048 00300048 00000030     ....H.H.H.0.0...
	...
  402788:	00880000 00a800a8 00a800a8 005000a8     ..............P.
  402798:	00000050 00000000 00000000 00880000     P...............
  4027a8:	00500088 00200020 00880050 00000088     ..P. . .P.......
	...
  4027c0:	00880000 00880088 00500050 00200020     ........P.P. . .
  4027d0:	00000020 00000000 00000000 00fc0000      ...............
  4027e0:	00080004 00200010 00800040 000000fc     ...... .@.......
	...
  4027f8:	00400070 00400040 00400040 00400040     p.@.@.@.@.@.@.@.
  402808:	00400040 00000070 00000000 00400040     @.@.p.......@.@.
  402818:	00200020 00100020 00100010 00080008      . . ...........
	...
  402830:	00080038 00080008 00080008 00080008     8...............
  402840:	00080008 00000038 00000000 00280010     ....8.........(.
  402850:	00000044 00000000 00000000 00000000     D...............
	...
  402878:	00000038 00000000 00000000 00200000     8............. .
  402888:	00000010 00000000 00000000 00000000     ................
	...
  4028a4:	00700000 00080008 00880078 0000007c     ..p.....x...|...
	...
  4028bc:	00800080 00f80080 00840084 00840084     ................
  4028cc:	000000f8 00000000 00000000 00000000     ................
  4028dc:	00780000 00800080 00800080 00000078     ..x.........x...
	...
  4028f4:	00040004 007c0004 00840084 008c0084     ......|.........
  402904:	00000074 00000000 00000000 00000000     t...............
  402914:	00780000 00fc0084 00800080 0000007c     ..x.........|...
	...
  40292c:	0020001c 00fc0020 00200020 00200020     .. . ... . . . .
  40293c:	000000fc 00000000 00000000 00000000     ................
  40294c:	007c0000 00840084 00840084 0004007c     ..|.........|...
  40295c:	00000078 00000000 00800080 00b80080     x...............
  40296c:	008400c4 00840084 00000084 00000000     ................
  40297c:	00000000 00100000 00700000 00100010     ..........p.....
  40298c:	00100010 0000007c 00000000 00000000     ....|...........
  40299c:	00080000 00780000 00080008 00080008     ......x.........
  4029ac:	00080008 00700008 00000000 00800080     ......p.........
  4029bc:	00880080 00a00090 008800d0 00000088     ................
	...
  4029d4:	002000e0 00200020 00200020 00200020     .. . . . . . . .
  4029e4:	000000f8 00000000 00000000 00000000     ................
  4029f4:	00a40000 00a400fc 00a400a4 000000a4     ................
	...
  402a10:	00b80000 008400c4 00840084 00000084     ................
	...
  402a2c:	00780000 00840084 00840084 00000078     ..x.........x...
	...
  402a48:	00b80000 008400c4 00840084 008000f8     ................
  402a58:	00000080 00000000 00000000 007c0000     ..............|.
  402a68:	00840084 00840084 0004007c 00000004     ........|.......
	...
  402a80:	00d80000 00400060 00400040 000000f0     ....`.@.@.@.....
	...
  402a9c:	00780000 00400080 00080030 000000f0     ..x...@.0.......
	...
  402ab8:	00fc0020 00200020 00200020 0000001c      ... . . . .....
	...
  402ad4:	00880000 00880088 00880088 0000007c     ............|...
	...
  402af0:	00840000 00840084 00480048 00000030     ........H.H.0...
	...
  402b0c:	00880000 00a800a8 00a800a8 00000050     ............P...
	...
  402b28:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
  402b44:	00840000 00480084 00300048 00200010     ......H.H.0... .
  402b54:	00000040 00000000 00000000 00f80000     @...............
  402b64:	00100008 00400020 000000f8 00000000     .... .@.........
  402b74:	00000000 00200010 00100020 00200020     ...... . ... . .
  402b84:	00200010 00100020 00000000 00000000     .. . ...........
  402b94:	00100010 00100010 00000000 00100010     ................
  402ba4:	00100010 00000000 00000000 00100020     ............ ...
  402bb4:	00200010 00100010 00100020 00200010     .. ..... ..... .
  402bc4:	00000000 000007e2 00000003 00000013     ................
  402bd4:	0000000c 0000000f 0000002d 00000001     ........-.......
  402be4:	646e756d 0000006f                       mundo...

00402bec <_global_impure_ptr>:
  402bec:	20400020                                 .@ 

00402bf0 <_init>:
  402bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402bf2:	bf00      	nop
  402bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402bf6:	bc08      	pop	{r3}
  402bf8:	469e      	mov	lr, r3
  402bfa:	4770      	bx	lr

00402bfc <__init_array_start>:
  402bfc:	00402061 	.word	0x00402061

00402c00 <__frame_dummy_init_array_entry>:
  402c00:	00400165                                e.@.

00402c04 <_fini>:
  402c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  402c06:	bf00      	nop
  402c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
  402c0a:	bc08      	pop	{r3}
  402c0c:	469e      	mov	lr, r3
  402c0e:	4770      	bx	lr

00402c10 <__fini_array_start>:
  402c10:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr
	...

2040000c <sysfont>:
2040000c:	0000 0000 2180 0040 0e0a 7d20               .....!@... }

20400018 <g_interrupt_enabled>:
20400018:	0001 0000                                   ....

2040001c <SystemCoreClock>:
2040001c:	0900 003d                                   ..=.

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__atexit_recursive_mutex>:
20400448:	06e4 2040                                   ..@ 
